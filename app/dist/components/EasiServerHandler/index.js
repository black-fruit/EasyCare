var net=require("net"),BufferParser=require("./utils/BufferParser");const STATE={DISCONNECT:0,STARTCONNECT:1,CONNECTING:2,CONNECTED:3},TIMEOUT=5e3;class handler{constructor(t){this.opt=t,this.connect=this.connect.bind(this),this.sendData=this.sendData.bind(this),this.handleData=this.handleData.bind(this),this.handleClose=this.handleClose.bind(this),"function"==typeof this.opt.receiveDataHandler?this.receiveDataHandler=this.opt.receiveDataHandler:this.receiveDataHandler=()=>{},this.toDisconnect(),this.toStartConnect()}toDisconnect(){this.state=STATE.DISCONNECT,this.closeSocket(),clearInterval(this.reconnectInterval),this.reconnectInterval=setInterval((()=>{this.state===STATE.DISCONNECT&&(this.closeSocket(),this.toStartConnect())}),5e3)}toStartConnect(){this.state=STATE.STARTCONNECT,this.initSocket(),this.connect(),this.startConnectProcess=setTimeout((()=>{this.state!==STATE.DISCONNECT&&this.state!==STATE.STARTCONNECT||this.toDisconnect()}),5e3)}toConnecting(){this.state=STATE.CONNECTING,clearTimeout(this.connectingProcess),this.connectingProcess=setTimeout((()=>{this.state!==STATE.CONNECTED&&this.toDisconnect()}),2e4)}toConnected(){this.state=STATE.CONNECTED,clearTimeout(this.startConnectProcess),clearTimeout(this.connectingProcess),clearInterval(this.reconnectInterval)}initSocket(){this.socket=new net.Socket;const t=this.opt,{host:e,port:s}=t,n=`${e}:${s}`;this.serverUrl=n,this.bufferParser=new BufferParser,console.log("create a new socket for ",n),this.socket.on("data",this.handleData),this.socket.on("close",this.handleClose)}closeSocket(){if(this.socket&&this.socket.destroy)try{const t=this.socket;delete this.socket,t.unref(),t.end(),t.destroy()}catch(t){console.error(t)}}startHandShake(){this.toConnecting(),console.log("EasiServerHandler: connected successfully!");const{appName:t,appVersion:e}=this.opt;this.sendData(1,{Paras:[t,e]})}connect(){if(this.state!==STATE.STARTCONNECT)return!1;try{const t=this.opt,{host:e,port:s}=t;this.socket.connect(s,e,(()=>{this.startHandShake()}))}catch(t){throw this.toDisconnect(),t}}handleClose(){console.log("EasiServerHandler: connection close"),this.toDisconnect()}handleData(t){this.bufferParser.buffer2Json(t,(t=>{const{id:e,content:s}=t;3===e?this.state!==STATE.CONNECTED&&this.toConnected():this.receiveDataHandler(e,s)}),(t=>{console.error(t)}))}sendData(t=1,e={}){if(this.state===STATE.DISCONNECT||this.state===STATE.STARTCONNECT)return!1;const s={id:t},n=e;this.bufferParser.json2Buffer(n,s,(t=>{this.socket.write(t)}),(t=>{console.error(t)}))}}function build(t){return new handler(t)}module.exports=build;