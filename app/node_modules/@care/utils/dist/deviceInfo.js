"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// hack for test. more info, see https://stackoverflow.com/questions/55187438/jest-mock-function-inside-function
// import * as deviceInfo from './deviceInfo';
var fingerprintjs2_1 = __importDefault(require("fingerprintjs2"));
var FINGER_PRINT_LOCAL_STORAGE_KEY = 'CARE_FINGER_PRINT_ID';
/**
 * 从 localStroage 里面取出 deviceId
 * @return {String} deviceId
 */
function getDeviceIdFromLocalStorage() {
    if (typeof window === 'object') {
        var value = window.localStorage.getItem(FINGER_PRINT_LOCAL_STORAGE_KEY);
        return value ? value : '';
    }
    else {
        return '';
    }
}
/**
 * 把 deviceId 保存到 localStorage
 * @param {String} deviceId 要设置的设备id
 * @param {Boolean} isForce 是否强制设置
 */
function setDeviceIdToLocalStorage(deviceId) {
    try {
        if (!deviceId || typeof deviceId !== 'string') {
            return false;
        }
        if (typeof window !== 'object') {
            return false;
        }
        window.localStorage.setItem(FINGER_PRINT_LOCAL_STORAGE_KEY, deviceId);
    }
    catch (err) {
        // catch是为了避免在localStorage.setItem时，发生DOM Exception 22的异常问题
        console.error('setDeviceIdToLocalStorage error', err);
        return;
    }
}
/**
 * 用 fingerprint2 生成 deviceId
 */
function generateDeviceId() {
    return new Promise(function (resolve, reject) {
        try {
            fingerprintjs2_1.default.get(function (components) {
                var values = components.map(function (component) { return component.value; });
                var murmur = fingerprintjs2_1.default.x64hash128(values.join(''), 31);
                resolve(murmur);
            });
        }
        catch (err) {
            console.error('generateDeviceId error: ', err);
            reject(err);
        }
    });
}
exports.generateDeviceId = generateDeviceId;
/**
 * 获取设置的 deviceId
 * @description 一台设置有唯一的 deviceId，用 fingerprint2 生成
 */
function getDeviceId() {
    return __awaiter(this, void 0, void 0, function () {
        var deviceId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    deviceId = getDeviceIdFromLocalStorage();
                    if (!!deviceId) return [3 /*break*/, 2];
                    return [4 /*yield*/, generateDeviceId()];
                case 1:
                    deviceId = (_a.sent()) || '';
                    setDeviceIdToLocalStorage(deviceId);
                    _a.label = 2;
                case 2: return [2 /*return*/, deviceId];
            }
        });
    });
}
exports.getDeviceId = getDeviceId;
