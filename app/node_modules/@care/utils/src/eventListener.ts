type EventListenerProps = {
  bind(name: string, callback: Function): void,
  uniqueBind(name: string, callback: Function): void,
  trigger(name: string, ...args: any[]): void,
  unbind(name?: string): void,
  getStringifyEventObj(): string;
}

type EventObj = {
  [eventName: string]: Function[]
}

const EventListener: EventListenerProps = (function() {
  let eventObj: EventObj = {};
  return {
    bind(this: EventListenerProps, name: string, callback: Function): void {
      if (!eventObj[name]) {
        eventObj[name] = [];
      }
      eventObj[name].push(callback);
    },

    // 一个事件，只绑定一个函数
    uniqueBind(this: EventListenerProps, name: string, callback: Function): void {
      eventObj[name] = [callback];
    },

    trigger: function (this: EventListenerProps, name: string, ...args: any[]): void {
      for (let index in eventObj[name]) {
        eventObj[name][index](...args);
      }
    },

    unbind(this: EventListenerProps, name?: string): void {
      if(!name) {
        eventObj = {};
        return;
      }
      if (!eventObj[name]) {
        return;
      }
      delete eventObj[name];
    },

    getStringifyEventObj(): string {
      return JSON.stringify(eventObj);
    }
  }
})();

export default EventListener;