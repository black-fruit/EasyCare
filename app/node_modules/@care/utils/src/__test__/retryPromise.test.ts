import retryPromise from '../retryPromise';
jest.setTimeout(30000);

describe('测试 retryPromise 函数', () => {
  it('1. 请求成功， 自定义参数', async (done) => {
    const request = jest.fn().mockImplementation((message: string) => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(message)
        }, 0)
      })
    })
    const retryFunc = retryPromise(request, { 
      timeout: 200
    });
    const result = await retryFunc('success');
    expect(request).toBeCalledTimes(1);
    expect(result).toBe('success')
    done();
  })

  it('2. 请求成功，默认参数', async (done) => {
    const request = jest.fn().mockImplementation((message: string) => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(message)
        }, 0)
      })
    })
    const retryFunc = retryPromise(request);
    const result = await retryFunc('success');
    expect(request).toBeCalledTimes(1);
    expect(result).toBe('success')
    done();
  })

  it('3. 请求成功，默认timeout，自定义retryTime, interval', async (done) => {
    const request = jest.fn().mockImplementation((message: string) => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(message)
        }, 0)
      })
    })
    const retryFunc = retryPromise(request, {
      retryTime: 3,
      interval: 100
    });
    const result = await retryFunc('success');
    expect(request).toBeCalledTimes(1);
    expect(result).toBe('success')
    done();
  })

  it('4. 请求失败', async (done) => {
    // @ts-ignore
    const request = jest.fn().mockImplementation((message: string) => {
      // @ts-ignore
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          reject('custom error')
        }, 0)
      })
    })
    const retryFunc = retryPromise(request, {
      retryTime: 3,
      timeout: 1000,
      interval: 200
    });
    try {
      await retryFunc('success');
    } catch (error) {
      expect(error).toBe('custom error');
      expect(request).toBeCalledTimes(4);
    }
    done();
  })

  it('5. 请求重试', async (done) => {
    let resolveTime = 450;
    const request = jest.fn().mockImplementation((message: string) => {
      resolveTime -= 100;
      // @ts-ignore
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve(message);
        }, resolveTime)
      })
    })
    const retryFunc = retryPromise(request, {
      timeout: 300,
      interval: 100,
    });
    await retryFunc('success');
    expect(request).toBeCalledTimes(2);
    done();
  })

  it('6. 请求重试, 间隔2s', async (done) => {
    let resolveTime = 600;
    const interval = 200;
    const request = jest.fn().mockImplementation((message: string) => {
      resolveTime -= interval;
      // @ts-ignore
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve(message);
        }, resolveTime)
      })
    })
    const retryFunc = retryPromise(request, {
      timeout: 300,
      interval
    });
    await retryFunc('success');
    expect(request).toBeCalledTimes(2);
    done();
  })
})