import EventListener from '../eventListener';

describe('测试 EventListener 对象 ', () => {

  const play = jest.fn();
  const play2 = jest.fn();
  const pause = jest.fn();
  const end = jest.fn(id => id)

  beforeEach(() => {
    play.mock.calls.length = 0;
    play2.mock.calls.length = 0;
    pause.mock.calls.length = 0;
    end.mock.calls.length = 0;
  })

  it('1. 发布者发布事件，订阅该事件的订阅者收到通知', () => {
    EventListener.bind('play', play)
    EventListener.bind('play', play)
    EventListener.trigger('play');
    expect(play.mock.calls.length).toBe(2);

  })

  it('2. 订阅者通过 uniqueBind 订阅', () => {
    EventListener.unbind('play');
    EventListener.uniqueBind('play', play)
    EventListener.uniqueBind('play', play)
    EventListener.uniqueBind('play', play2)
    EventListener.trigger('play');
    expect(play.mock.calls.length).toBe(0);
    expect(play2.mock.calls.length).toBe(1);
  })

  it('3. unbind 不传参数', () => {
    EventListener.bind('play', play);
    EventListener.bind('pause', pause);
    EventListener.bind('end', end);
    EventListener.unbind();
    EventListener.trigger('play');
    EventListener.trigger('pause');
    EventListener.trigger('end');
    expect(play.mock.calls.length).toBe(0);
    expect(pause.mock.calls.length).toBe(0);
    expect(end.mock.calls.length).toBe(0);
  })

  it('4. unbind 传参', () => {
    EventListener.bind('play', play);
    EventListener.bind('pause', pause);
    EventListener.bind('end', end);
    EventListener.unbind('play');
    EventListener.trigger('play');
    EventListener.trigger('pause');
    EventListener.trigger('end');
    expect(play.mock.calls.length).toBe(0);
    expect(pause.mock.calls.length).toBe(1);
    expect(end.mock.calls.length).toBe(1);
  })

  it('5. unbind 一个不存在的事件', () => {
    EventListener.bind('play', play);
    EventListener.unbind('error');
    const eventObj = JSON.parse(EventListener.getStringifyEventObj());
    expect(eventObj.play.length).toBe(1);
    EventListener.trigger('play');
    expect(play.mock.calls.length).toBe(1);
  })

  it('6. EventListener 上不能直接获取事件对象', () => {
    expect(EventListener?.eventObj).toBe(undefined);
  })
})