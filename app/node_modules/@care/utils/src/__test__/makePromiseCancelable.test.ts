import makePromiseCancelable from '../makePromiseCancelable';

function flushPromises() {
  return new Promise((resolve) => {
    setImmediate(resolve);
  });
}

describe('测试 makePromiseCancelable 函数', () => {
  it('1. Promise resolve 未取消', async () => {
    const cancelablePromiseObj = makePromiseCancelable<number>(new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(1);
      }, 10);
    }));
    try {
      const resp = await cancelablePromiseObj.promise;
      expect(resp).toBe(1);
    } catch(err) {
      expect(err).toBeUndefined();
    }
  });

  it('2. Promise resolve 取消', async () => {
    const cancelablePromiseObj = makePromiseCancelable<number>(new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(1);
      }, 10);
    }));
    setTimeout(() => {
      cancelablePromiseObj.cancel();
    }, 5);
    try {
      await cancelablePromiseObj.promise;
    } catch(err) {
      expect(err.isCanceled).toBe(true);
    }
  });

  it('3. Promise reject 未取消', async () => {
    const cancelablePromiseObj = makePromiseCancelable<number>(new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(2);
      }, 10);
    })); 
    expect.assertions(1);
    try {
      await cancelablePromiseObj.promise;
      await flushPromises();
    } catch(err) {
      expect(err).toBe(2);
    }
  });

  it('4. Promise reject 取消', async () => {
    const cancelablePromiseObj = makePromiseCancelable<number>(new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(1);
      }, 10);
    }));
    setTimeout(() => {
      cancelablePromiseObj.cancel();
    }, 5);
    try {
      await cancelablePromiseObj.promise;
    } catch(err) {
      expect(err.isCanceled).toBe(true);
    }
  });
})