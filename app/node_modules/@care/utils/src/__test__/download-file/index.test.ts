import downloadFile from '../../download-file';
import getBlob from '../../download-file/util/url-to-blob';
import saveBlobAsFile from '../../download-file/util/save-blob-as-file';
jest.mock('../../download-file/util/url-to-blob', () => {
  return jest.fn().mockImplementation((url) => {
    return new Promise((resolve, reject) => {
      if(url) resolve(url);
      reject('')
    })
  })
})

jest.mock('../../download-file/util/save-blob-as-file');


describe('测试 downloadFile 函数', () => {
  afterEach(() => {    
    jest.clearAllMocks();
  });

  const options = {
    beforeDownload: jest.fn(),
    success: jest.fn(),
    fail: jest.fn(),
    done: jest.fn()
  }
  it('1. 可以下载', (callback) => {
    downloadFile('https://store-g1.seewo.com/09ebeb7ed8ff4cc986e7f98e64f7cda2', 'test.xlsx', options);
    setTimeout(() => {
      expect(getBlob).toBeCalled();
      expect(saveBlobAsFile).toBeCalled();
      expect(options.beforeDownload).toBeCalled();
      expect(options.success).toBeCalled();
      expect(options.done).toBeCalled();
      callback();
    }, 0);
  })

  it('2. 下载失败后执行回调', (callback) => {
    downloadFile('', 'test.xlsx', options);
    setTimeout(() => {
      expect(options.fail).toBeCalled();
      expect(options.done).toBeCalled();
      callback();
    }, 0);
  })

  it('3. 停止下载', (callback) => {
    options.beforeDownload = jest.fn().mockImplementation(() => {
      return false;
    })
    downloadFile('', 'test.xlsx', options);
    setTimeout(() => {
      expect(getBlob).not.toBeCalled();
      callback();
    }, 0);
  })
})