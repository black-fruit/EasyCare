import getImage from '../../getImage';

describe('测试 getImage 函数', () => {
    Object.defineProperty(Image.prototype, 'src', {
      set(src) {
        this.setAttribute('src', src)
        if(src === 'success') {
          this.onload();
        } else {
          this.onerror();
        }
      },
    });

  it('1.加载远程图片，设置跨域属性', (done) => {
    try {
      const img = document.createElement('img');
      img.onload = jest.fn();
      img.src = 'success';
      img.crossOrigin = 'anonymous';
      expect(getImage('success', true)).resolves.toEqual(img)
      done();
    } catch (error) {
      console.error(error)
    }
  })

  it('2.加载远程图片，不设置跨域属性', () => {
      const img = document.createElement('img');
      img.onload = jest.fn();
      img.src = 'success';
      expect(getImage('success', false)).resolves.toEqual(img);
  })

  it('4. 图片加载成功，调用onload', (done) => {
    const img = document.createElement('img');
    const _onload = jest.fn();
    img.onload = _onload;
    img.src = 'success';
    expect(getImage('success', false)).resolves.toEqual(img)
    expect(_onload).toBeCalledTimes(1);
    done();
  })

  it('4. 图片加载失败，调用onerror', (done) => {
    const img = document.createElement('img');
    const _onerror = jest.fn();
    img.onerror = _onerror;
    img.src = 'fail';
    expect(getImage('fail', false)).rejects.not.toBe(img);
    expect(_onerror).toBeCalledTimes(1);
    done();
  })
})