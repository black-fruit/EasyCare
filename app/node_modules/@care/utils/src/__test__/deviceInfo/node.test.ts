/**
* @jest-environment node
*/

import * as deviceInfo from '../../deviceInfo';

describe('node环境，测试 getDeviceId 函数', () => {

  it('1. node环境，可以获取设备id', async () => {
    const deviceId = await deviceInfo.getDeviceId();
    expect(deviceId).not.toBe('');
  })

  it('2. 生成id失败', async () => {
    const spy = jest.spyOn(deviceInfo, 'generateDeviceId');
    spy.mockReturnValue(new Promise(resolve => resolve('')))
    const deviceId = await deviceInfo.getDeviceId();
    expect(spy).toBeCalled();
    expect(deviceId).toBe('');
    spy.mockRestore()
  })

  it('3. 生成id失败，测试 setDeviceIdToLocalStorage 函数，自定义id有值', async () => {
    const spy = jest.spyOn(deviceInfo, 'generateDeviceId');
    spy.mockReturnValue(new Promise(resolve => resolve('custom')))
    const deviceId = await deviceInfo.getDeviceId();
    expect(deviceId).toBe('custom');
    spy.mockRestore();
  })  
})