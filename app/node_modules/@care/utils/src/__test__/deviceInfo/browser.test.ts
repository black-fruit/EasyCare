import * as deviceInfo from '../../deviceInfo'; 
import Fingerprint2 from 'fingerprintjs2';


describe('测试 getDeviceId 函数', () => {
  it('1. 获取设备id', async () => {
    const result = await deviceInfo.getDeviceId();
    expect(result).not.toBe(null)
  })

  it('2. 生成id失败，测试 setDeviceIdToLocalStorage 函数，setItem失败', async () => {
    const setItem = localStorage.__proto__.setItem;
    Object.defineProperty(window.localStorage.__proto__, 'setItem', {
      get() {
        return () => { throw new Error('DOM Exception 22') };
      }
    })
    
    const spy = jest.spyOn(deviceInfo, 'generateDeviceId');
    spy.mockReturnValue(new Promise(resolve => resolve('custom')))
    localStorage.removeItem('CARE_FINGER_PRINT_ID');
    const result = await deviceInfo.getDeviceId();
    expect(result).toBe('custom');
    spy.mockRestore();
    Object.defineProperty(window.localStorage.__proto__, 'setItem', {
      get() {
        return setItem;
      }
    })
  })

  it('3. Fingerprint2.get 抛出异常', async () => {
    const spy = jest.spyOn(Fingerprint2, 'get');
    spy.mockImplementation(() => {
      throw new Error('Fingerprint2.get error')
    })
    try {
      await deviceInfo.getDeviceId();
    } catch (error) {
      expect(error.message).toBe('Fingerprint2.get error');
    }
  })

  it('4. 从 storage 取值', async () => {
    localStorage.setItem('CARE_FINGER_PRINT_ID', 'hello');
    const deviceId = await deviceInfo.getDeviceId();
    expect(deviceId).toBe('hello');
  })
  
})
