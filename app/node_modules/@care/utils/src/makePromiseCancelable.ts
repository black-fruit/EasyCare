const makePromiseCancelable = <T>(promise: Promise<T>) => {
  let hasCanceled = false;

  const wrappedPromise = new Promise<T>((resolve, reject) => {
    promise.then((resp) => {
      hasCanceled ? reject({ isCanceled: true }) : resolve(resp);
    }).catch((error) => {
      hasCanceled ? reject({ isCanceled: true }) : reject(error);
    });
  });

  return {
    promise: wrappedPromise,
    cancel() {
      hasCanceled = true;
    },
  };
}

export default makePromiseCancelable;