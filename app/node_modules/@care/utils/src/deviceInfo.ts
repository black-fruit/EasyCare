// hack for test. more info, see https://stackoverflow.com/questions/55187438/jest-mock-function-inside-function
// import * as deviceInfo from './deviceInfo';
import Fingerprint2 from 'fingerprintjs2';

const FINGER_PRINT_LOCAL_STORAGE_KEY = 'CARE_FINGER_PRINT_ID';

/**
 * 从 localStroage 里面取出 deviceId
 * @return {String} deviceId
 */
function getDeviceIdFromLocalStorage(): string {
  if (typeof window === 'object') {
    const value = window.localStorage.getItem(FINGER_PRINT_LOCAL_STORAGE_KEY);
    return value ? value : '';
  } else {
    return '';
  }
}

/**
 * 把 deviceId 保存到 localStorage
 * @param {String} deviceId 要设置的设备id
 * @param {Boolean} isForce 是否强制设置
 */
function setDeviceIdToLocalStorage(deviceId: string): any {
  try {
    if (!deviceId || typeof deviceId !== 'string') {
      return false;
    }

    if (typeof window !== 'object') {
      return false;
    }

    window.localStorage.setItem(FINGER_PRINT_LOCAL_STORAGE_KEY, deviceId);
  } catch (err) {
    // catch是为了避免在localStorage.setItem时，发生DOM Exception 22的异常问题
    console.error('setDeviceIdToLocalStorage error', err);
    return;
  }
}

/**
 * 用 fingerprint2 生成 deviceId
 */
export function generateDeviceId(): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      Fingerprint2.get((components: Array<any>) => {
        const values = components.map(function (component) { return component.value });
        const murmur = Fingerprint2.x64hash128(values.join(''), 31);
        resolve(murmur);
      });
    } catch(err) {
      console.error('generateDeviceId error: ', err);
      reject(err);
    }
  });
}

/**
 * 获取设置的 deviceId
 * @description 一台设置有唯一的 deviceId，用 fingerprint2 生成
 */
export async function getDeviceId() {
  let deviceId: string = getDeviceIdFromLocalStorage();
  if(!deviceId) {
    deviceId = await generateDeviceId() || '';
    setDeviceIdToLocalStorage(deviceId);
  }
  return deviceId;
}