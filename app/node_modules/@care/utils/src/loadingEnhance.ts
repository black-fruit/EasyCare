interface ILoadingDecoratorOptions {
  loadingPrefix?: string;
  showLoading?(): void;
  hideLoading?(): void;
}

// TODO: 添加单元测试

/**
 * class Xxx {
 * 
 *  @loadingDecorator({ showLoading, hideLoading })// 参数可选    
 *  someFunctionNeedToDecorator() {}
 * 
 * }
 */
export const loadingDecorator = (options?: ILoadingDecoratorOptions) => {
  const loadingTags: {
    [index: string]: boolean;
  } = {};
  // @ts-ignore
  return (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<(...params: any[]) => Promise<any>>) => {

    const oldValue = descriptor.value;
    const loadingStr = `${options?.loadingPrefix || propertyKey || '_loading'}-decorator`;

    descriptor.value = async function(...args: any[]) {
      if (loadingTags[loadingStr]) {
        return ;
      } else {
        loadingTags[loadingStr] = true;
        if (options?.showLoading) {
          options.showLoading();
        }
        let result: any;
        try {
          result = await oldValue!.apply(this, args);
        } finally {
          loadingTags[loadingStr] = false;
          if (options?.hideLoading) {
            options.hideLoading();
          }
        }
        return result;
      }
    }

    return descriptor;
  }
}


/**
 * const enhancedFunc = loadingEnhance(function a() { //... }, { showLoading, hideLoading });
 * 第二个参数是可以选的。
 */
export const loadingEnhance = (originFunc: Function, options?: ILoadingDecoratorOptions) => {
  const loadingTags: {
    [index: string]: boolean;
  } = {};

  const loadingStr = `${options?.loadingPrefix || '_loading'}-decorator`;

  return async (...params: any[]) => {
    if(loadingTags[loadingStr]) {
      return ;
    }

    loadingTags[loadingStr] = true;
    if (options?.showLoading) {
      options.showLoading();
    }

    let result: any;
    try {
      result = await originFunc(...params);
    } finally {
      loadingTags[loadingStr] = false;
      if (options?.hideLoading) {
        options.hideLoading();
      };
    }
    return result;
  }
}