var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// TODO: 添加单元测试
/**
 * class Xxx {
 *
 *  @loadingDecorator({ showLoading, hideLoading })// 参数可选
 *  someFunctionNeedToDecorator() {}
 *
 * }
 */
export var loadingDecorator = function (options) {
    var loadingTags = {};
    // @ts-ignore
    return function (target, propertyKey, descriptor) {
        var _a;
        var oldValue = descriptor.value;
        var loadingStr = (((_a = options) === null || _a === void 0 ? void 0 : _a.loadingPrefix) || propertyKey || '_loading') + "-decorator";
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!loadingTags[loadingStr]) return [3 /*break*/, 1];
                            return [2 /*return*/];
                        case 1:
                            loadingTags[loadingStr] = true;
                            if ((_a = options) === null || _a === void 0 ? void 0 : _a.showLoading) {
                                options.showLoading();
                            }
                            result = void 0;
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, , 4, 5]);
                            return [4 /*yield*/, oldValue.apply(this, args)];
                        case 3:
                            result = _c.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            loadingTags[loadingStr] = false;
                            if ((_b = options) === null || _b === void 0 ? void 0 : _b.hideLoading) {
                                options.hideLoading();
                            }
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/, result];
                    }
                });
            });
        };
        return descriptor;
    };
};
/**
 * const enhancedFunc = loadingEnhance(function a() { //... }, { showLoading, hideLoading });
 * 第二个参数是可以选的。
 */
export var loadingEnhance = function (originFunc, options) {
    var _a;
    var loadingTags = {};
    var loadingStr = (((_a = options) === null || _a === void 0 ? void 0 : _a.loadingPrefix) || '_loading') + "-decorator";
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return __awaiter(void 0, void 0, void 0, function () {
            var result;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (loadingTags[loadingStr]) {
                            return [2 /*return*/];
                        }
                        loadingTags[loadingStr] = true;
                        if ((_a = options) === null || _a === void 0 ? void 0 : _a.showLoading) {
                            options.showLoading();
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, originFunc.apply(void 0, params)];
                    case 2:
                        result = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        loadingTags[loadingStr] = false;
                        if ((_b = options) === null || _b === void 0 ? void 0 : _b.hideLoading) {
                            options.hideLoading();
                        }
                        ;
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    };
};
