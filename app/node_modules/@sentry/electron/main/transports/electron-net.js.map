{"version":3,"file":"electron-net.js","sourceRoot":"","sources":["../../src/main/transports/electron-net.ts"],"names":[],"mappings":"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","sourcesContent":["import { createTransport } from '@sentry/core';\nimport {\n  BaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { net } from 'electron';\nimport { Readable, Writable } from 'stream';\nimport { URL } from 'url';\nimport { createGzip } from 'zlib';\n\nimport { whenAppReady } from '../electron-normalize';\n\nexport interface ElectronNetTransportOptions extends BaseTransportOptions {\n  /** Define custom headers */\n  headers?: Record<string, string>;\n}\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Buffer or string\n * We don't have Readable.from in earlier versions of node\n */\nfunction streamFromBody(body: string | Uint8Array): Readable {\n  return new Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\nfunction getRequestOptions(url: string): Electron.ClientRequestConstructorOptions {\n  const { hostname, pathname, port, protocol, search } = new URL(url);\n\n  return {\n    method: 'POST',\n    hostname,\n    path: `${pathname}${search}`,\n    port: parseInt(port, 10),\n    protocol,\n  };\n}\n\n/**\n * Creates a Transport that uses Electrons net module to send events to Sentry.\n */\nexport function makeElectronTransport(options: ElectronNetTransportOptions): Transport {\n  return createTransport(options, createElectronNetRequestExecutor(options.url, options.headers || {}));\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nexport function createElectronNetRequestExecutor(\n  url: string,\n  baseHeaders: Record<string, string>,\n): TransportRequestExecutor {\n  baseHeaders['Content-Type'] = 'application/x-sentry-envelope';\n\n  return function makeRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    return whenAppReady.then(\n      () =>\n        new Promise((resolve, reject) => {\n          let bodyStream = streamFromBody(request.body);\n\n          const headers = { ...baseHeaders };\n\n          if (request.body.length > GZIP_THRESHOLD) {\n            headers['content-encoding'] = 'gzip';\n            bodyStream = bodyStream.pipe(createGzip());\n          }\n\n          const req = net.request(getRequestOptions(url));\n\n          for (const header of Object.keys(headers)) {\n            req.setHeader(header, headers[header]);\n          }\n\n          req.on('response', (res) => {\n            res.on('error', reject);\n\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? undefined;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? undefined;\n\n            resolve({\n              headers: dropUndefinedKeys({\n                'retry-after': Array.isArray(retryAfterHeader) ? retryAfterHeader[0] : retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader) ? rateLimitsHeader[0] : rateLimitsHeader,\n              }),\n            });\n          });\n\n          req.on('error', reject);\n\n          // The docs say that ClientRequest is Writable but the types don't match exactly\n          bodyStream.pipe(req as unknown as Writable);\n        }),\n    );\n  };\n}\n"]}