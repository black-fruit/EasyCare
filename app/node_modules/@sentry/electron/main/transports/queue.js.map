{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/main/transports/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransportRequest } from '@sentry/types';\nimport { logger, uuid4 } from '@sentry/utils';\nimport { join } from 'path';\n\nimport { readFileAsync, unlinkAsync, writeFileAsync } from '../fs';\nimport { BufferedWriteStore } from '../store';\n\nconst MILLISECONDS_PER_DAY = 86_400_000;\n\ninterface PersistedRequest {\n  bodyPath: string;\n  date: Date;\n  // Envelopes were persisted in a different format in v3\n  // If this property exists, we discard this event\n  type?: unknown;\n}\n\ninterface PopResult {\n  request: QueuedTransportRequest;\n  pendingCount: number;\n}\n\nexport interface QueuedTransportRequest extends TransportRequest {\n  date?: Date;\n}\n\n/** A request queue that is persisted to disk to survive app restarts */\nexport class PersistedRequestQueue {\n  private readonly _queue: BufferedWriteStore<PersistedRequest[]> = new BufferedWriteStore(\n    this._queuePath,\n    'queue',\n    [],\n  );\n\n  public constructor(\n    private readonly _queuePath: string,\n    private readonly _maxAgeDays: number = 30,\n    private readonly _maxCount: number = 30,\n  ) {}\n\n  /** Adds a request to the queue */\n  public async add(request: QueuedTransportRequest): Promise<number> {\n    const bodyPath = uuid4();\n    let queuedEvents = 0;\n\n    await this._queue.update((queue) => {\n      queue.push({\n        bodyPath,\n        date: request.date || new Date(),\n      });\n\n      while (queue.length > this._maxCount) {\n        const removed = queue.shift();\n        if (removed) {\n          void this._removeBody(removed.bodyPath);\n        }\n      }\n\n      queuedEvents = queue.length;\n      return queue;\n    });\n\n    try {\n      await writeFileAsync(join(this._queuePath, bodyPath), request.body);\n    } catch (_) {\n      //\n    }\n\n    return queuedEvents;\n  }\n\n  /** Pops the oldest event from the queue */\n  public async pop(): Promise<PopResult | undefined> {\n    let found: PersistedRequest | undefined;\n    let pendingCount = 0;\n    const cutOff = Date.now() - MILLISECONDS_PER_DAY * this._maxAgeDays;\n\n    await this._queue.update((queue) => {\n      while ((found = queue.shift())) {\n        // We drop events created in v3 of the SDK or before the cut-off\n        if ('type' in found || found.date.getTime() < cutOff) {\n          // we're dropping this event so delete the body\n          void this._removeBody(found.bodyPath);\n          found = undefined;\n        } else {\n          pendingCount = queue.length;\n          break;\n        }\n      }\n      return queue;\n    });\n\n    if (found) {\n      try {\n        const body = await readFileAsync(join(this._queuePath, found.bodyPath));\n        void this._removeBody(found.bodyPath);\n\n        return {\n          request: {\n            body,\n            date: found.date || new Date(),\n          },\n          pendingCount,\n        };\n      } catch (e) {\n        logger.warn('Filed to read queued request body', e);\n      }\n    }\n\n    return undefined;\n  }\n\n  /** Removes the body of the request */\n  private async _removeBody(bodyPath: string): Promise<void> {\n    try {\n      await unlinkAsync(join(this._queuePath, bodyPath));\n    } catch (_) {\n      //\n    }\n  }\n}\n"]}