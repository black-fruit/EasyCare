{"version":3,"file":"stack-parse.js","sourceRoot":"","sources":["../src/main/stack-parse.ts"],"names":[],"mappings":";;AAAA,uCAAkF;AAElF,yCAAuE;AACvE,uCAA+B;AAE/B,sCAAyC;AAEzC,6CAA6C;AAC7C,SAAS,qBAAqB,CAAC,QAA4B;IACzD,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO;KACR;IAED,MAAM,kBAAkB,GAAG,IAAA,qBAAY,EAAC,QAAQ,EAAE,cAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IAEpE,OAAO,IAAA,4BAAyB,EAAC,kBAAkB,CAAC,CAAC;AACvD,CAAC;AAED,yEAAyE;AAC5D,QAAA,kBAAkB,GAAgB,IAAA,yBAAiB,EAAC,IAAA,2BAAmB,EAAC,qBAAqB,CAAC,CAAC,CAAC","sourcesContent":["import { getModuleFromFilename as getModuleFromFilenameNode } from '@sentry/node';\nimport { StackParser } from '@sentry/types';\nimport { createStackParser, nodeStackLineParser } from '@sentry/utils';\nimport { app } from 'electron';\n\nimport { normalizeUrl } from '../common';\n\n/** Parses the module name form a filename */\nfunction getModuleFromFilename(filename: string | undefined): string | undefined {\n  if (!filename) {\n    return;\n  }\n\n  const normalizedFilename = normalizeUrl(filename, app.getAppPath());\n\n  return getModuleFromFilenameNode(normalizedFilename);\n}\n\n// node.js stack parser but filename normalized before parsing the module\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(getModuleFromFilename));\n"]}