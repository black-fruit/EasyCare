{"version":3,"file":"preload-injection.js","sourceRoot":"","sources":["../../src/main/integrations/preload-injection.ts"],"names":[],"mappings":";;AAAA,uCAA6C;AAG7C,yCAAuC;AACvC,uCAA+B;AAC/B,2BAAgC;AAChC,+BAAkC;AAElC,yCAAuC;AACvC,8DAA2E;AAG3E;;;;GAIG;AACH,MAAa,gBAAgB;IAA7B;QAIE,kBAAkB;QACX,SAAI,GAAW,gBAAgB,CAAC,EAAE,CAAC;IA0C5C,CAAC;IAxCC,kBAAkB;IACX,SAAS;;QACd,MAAM,OAAO,GAAG,MAAA,IAAA,oBAAa,GAAE,CAAC,SAAS,EAAc,0CAAE,UAAU,EAAiC,CAAC;QAErG,kFAAkF;QAClF,sCAAsC;QACtC,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,gBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5C,OAAO;SACR;QAED,cAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACrB,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAoC;QAChE,IAAI,IAAI,GAAG,SAAS,CAAC;QACrB,IAAI;YACF,IAAI,GAAG,IAAA,uDAAkC,GAAE;gBACzC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC;gBAC5C,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;SAC/C;QAAC,OAAO,CAAC,EAAE;YACV,EAAE;SACH;QAED,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAA,iBAAU,EAAC,IAAI,CAAC,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,EAAE;YAC5E,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,WAAW,EAAE,EAAE;gBACxC,yDAAyD;gBACzD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBACpC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;aACvC;SACF;aAAM;YACL,cAAM,CAAC,GAAG,CACR,oHAAoH,CACrH,CAAC;SACH;IACH,CAAC;;AA9CH,4CA+CC;AA9CC,kBAAkB;AACJ,mBAAE,GAAW,kBAAkB,CAAC","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { app } from 'electron';\nimport { existsSync } from 'fs';\nimport { isAbsolute } from 'path';\n\nimport { IPCMode } from '../../common';\nimport { rendererRequiresCrashReporterStart } from '../electron-normalize';\nimport { ElectronMainOptionsInternal } from '../sdk';\n\n/**\n * Injects the preload script into the provided sessions.\n *\n * Defaults to injecting into the defaultSession\n */\nexport class PreloadInjection implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'PreloadInjection';\n\n  /** @inheritDoc */\n  public name: string = PreloadInjection.id;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    const options = getCurrentHub().getClient<NodeClient>()?.getOptions() as ElectronMainOptionsInternal;\n\n    // If classic IPC mode is disabled, we shouldn't attempt to inject preload scripts\n    // eslint-disable-next-line no-bitwise\n    if ((options.ipcMode & IPCMode.Classic) == 0) {\n      return;\n    }\n\n    app.once('ready', () => {\n      this._addPreloadToSessions(options);\n    });\n  }\n\n  /**\n   * Attempts to add the preload script the the provided sessions\n   */\n  private _addPreloadToSessions(options: ElectronMainOptionsInternal): void {\n    let path = undefined;\n    try {\n      path = rendererRequiresCrashReporterStart()\n        ? require.resolve('../../preload/legacy.js')\n        : require.resolve('../../preload/index.js');\n    } catch (_) {\n      //\n    }\n\n    if (path && typeof path === 'string' && isAbsolute(path) && existsSync(path)) {\n      for (const sesh of options.getSessions()) {\n        // Fetch any existing preloads so we don't overwrite them\n        const existing = sesh.getPreloads();\n        sesh.setPreloads([path, ...existing]);\n      }\n    } else {\n      logger.log(\n        'The preload script could not be injected automatically. This is most likely caused by bundling of the main process',\n      );\n    }\n  }\n}\n"]}