{"version":3,"file":"child-process.js","sourceRoot":"","sources":["../../src/main/integrations/child-process.ts"],"names":[],"mappings":"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","sourcesContent":["import { addBreadcrumb, captureMessage, getCurrentHub } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Integration, SeverityLevel } from '@sentry/types';\n\nimport { OrBool } from '../../common/types';\nimport { EXIT_REASONS, ExitReason, onChildProcessGone, onRendererProcessGone } from '../electron-normalize';\nimport { ElectronMainOptions } from '../sdk';\n\ninterface ChildProcessOptions {\n  /** Child process events that generate breadcrumbs */\n  breadcrumbs: Readonly<ExitReason[]>;\n  /** Child process events that generate Sentry events */\n  events: Readonly<ExitReason[]>;\n}\n\nconst DEFAULT_OPTIONS: ChildProcessOptions = {\n  breadcrumbs: EXIT_REASONS,\n  events: ['abnormal-exit', 'launch-failed', 'integrity-failure'],\n};\n\n/** Gets message and severity */\nfunction getMessageAndSeverity(reason: ExitReason, proc?: string): { message: string; level: SeverityLevel } {\n  const message = `'${proc}' process exited with '${reason}'`;\n\n  switch (reason) {\n    case 'abnormal-exit':\n    case 'killed':\n      return { message, level: 'warning' };\n    case 'crashed':\n    case 'oom':\n    case 'launch-failed':\n    case 'integrity-failure':\n      return { message, level: 'fatal' };\n    default:\n      return { message, level: 'debug' };\n  }\n}\n\n/** Adds breadcrumbs for Electron events. */\nexport class ChildProcess implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'ChildProcess';\n\n  /** @inheritDoc */\n  public name: string = ChildProcess.id;\n\n  private readonly _options: ChildProcessOptions;\n\n  /**\n   * @param _options Integration options\n   */\n  public constructor(options: Partial<OrBool<ChildProcessOptions>> = {}) {\n    const { breadcrumbs, events } = options;\n    this._options = {\n      breadcrumbs: Array.isArray(breadcrumbs) ? breadcrumbs : breadcrumbs == false ? [] : DEFAULT_OPTIONS.breadcrumbs,\n      events: Array.isArray(events) ? events : events == false ? [] : DEFAULT_OPTIONS.events,\n    };\n  }\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    const { breadcrumbs, events } = this._options;\n    const allReasons = Array.from(new Set([...breadcrumbs, ...events]));\n\n    // only hook these events if we're after more than just the unresponsive event\n    if (allReasons.length > 0) {\n      const options = getCurrentHub().getClient<NodeClient>()?.getOptions() as ElectronMainOptions | undefined;\n\n      onChildProcessGone(allReasons, (details) => {\n        const { reason } = details;\n\n        // Capture message first\n        if (events.includes(reason)) {\n          const { message, level } = getMessageAndSeverity(details.reason, details.type);\n          captureMessage(message, { level, tags: { 'event.process': details.type } });\n        }\n\n        // And then add breadcrumbs for subsequent events\n        if (breadcrumbs.includes(reason)) {\n          addBreadcrumb({\n            type: 'process',\n            category: 'child-process',\n            ...getMessageAndSeverity(details.reason, details.type),\n            data: details,\n          });\n        }\n      });\n\n      onRendererProcessGone(allReasons, (contents, details) => {\n        const { reason } = details;\n        const name = options?.getRendererName?.(contents) || 'renderer';\n\n        // Capture message first\n        if (events.includes(reason)) {\n          const { message, level } = getMessageAndSeverity(details.reason, name);\n          captureMessage(message, level);\n        }\n\n        // And then add breadcrumbs for subsequent events\n        if (breadcrumbs.includes(reason)) {\n          addBreadcrumb({\n            type: 'process',\n            category: 'child-process',\n            ...getMessageAndSeverity(details.reason, name),\n            data: details,\n          });\n        }\n      });\n    }\n  }\n}\n"]}