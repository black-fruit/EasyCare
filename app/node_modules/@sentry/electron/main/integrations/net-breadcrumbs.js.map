{"version":3,"file":"net-breadcrumbs.js","sourceRoot":"","sources":["../../src/main/integrations/net-breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable deprecation/deprecation */\nimport { getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { getCurrentHub } from '@sentry/node';\nimport { DynamicSamplingContext, EventProcessor, Hub, Integration, Span, TracePropagationTargets } from '@sentry/types';\nimport {\n  dynamicSamplingContextToSentryBaggageHeader,\n  fill,\n  generateSentryTraceHeader,\n  logger,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\nimport { ClientRequest, ClientRequestConstructorOptions, IncomingMessage, net } from 'electron';\nimport { LRUMap } from 'lru_map';\nimport * as urlModule from 'url';\n\ntype ShouldTraceFn = (method: string, url: string) => boolean;\n\ninterface NetOptions {\n  /**\n   * Whether breadcrumbs should be captured for net requests\n   *\n   * Defaults to: true\n   */\n  breadcrumbs?: boolean;\n  /**\n   * Whether to capture transaction spans for net requests\n   *\n   * true | false | (method: string, url: string) => boolean\n   * Defaults to: true\n   */\n  tracing?: ShouldTraceFn | boolean;\n\n  /**\n   * @deprecated Use `tracePropagationTargets` client option instead.\n   *\n   * Sentry.init({\n   *   tracePropagationTargets: ['api.site.com'],\n   * })\n   */\n  tracingOrigins?: ShouldTraceFn | boolean;\n}\n\n/** http module integration */\nexport class Net implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'Net';\n\n  /** @inheritDoc */\n  public name: string = Net.id;\n\n  /** @inheritDoc */\n  public constructor(private readonly _options: NetOptions = {}) {}\n\n  /** @inheritDoc */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const clientOptions = getCurrentHub().getClient()?.getOptions();\n\n    // No need to instrument if we don't want to track anything\n    if (this._options.breadcrumbs === false && this._options.tracing === false) {\n      return;\n    }\n\n    fill(net, 'request', createWrappedRequestFactory(this._options, clientOptions?.tracePropagationTargets));\n  }\n}\n\n/**\n * Trimmed down version of the code from Electron here:\n * https://github.com/electron/electron/blob/f3df76dbdc58cb704637b89357e1400791c92cfe/lib/browser/api/net.ts#L209-L269\n *\n * We want to match the final URL that Electron uses\n */\nfunction parseOptions(optionsIn: ClientRequestConstructorOptions | string): { method: string; url: string } {\n  const { method, options } =\n    typeof optionsIn === 'string'\n      ? { method: 'GET', options: urlModule.parse(optionsIn) }\n      : { method: (optionsIn.method || 'GET').toUpperCase(), options: optionsIn };\n\n  let url = 'url' in options ? options.url : undefined;\n\n  if (!url) {\n    const urlObj: urlModule.UrlObject = {};\n    urlObj.protocol = options.protocol || 'http:';\n\n    if (options.host) {\n      urlObj.host = options.host;\n    } else {\n      if (options.hostname) {\n        urlObj.hostname = options.hostname;\n      } else {\n        urlObj.hostname = 'localhost';\n      }\n\n      if (options.port) {\n        urlObj.port = options.port;\n      }\n    }\n\n    const pathObj = urlModule.parse(options.path || '/');\n    urlObj.pathname = pathObj.pathname;\n    urlObj.search = pathObj.search;\n    urlObj.hash = pathObj.hash;\n    url = urlModule.format(urlObj);\n  }\n\n  return {\n    method,\n    url,\n  };\n}\n\nfunction addHeadersToRequest(\n  request: Electron.ClientRequest,\n  url: string,\n  sentryTraceHeader: string,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): void {\n  logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${url}\": `);\n  request.setHeader('sentry-trace', sentryTraceHeader);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  if (sentryBaggageHeader) {\n    request.setHeader('baggage', sentryBaggageHeader);\n  }\n}\n\ntype RequestOptions = string | ClientRequestConstructorOptions;\ntype RequestMethod = (opt: RequestOptions) => ClientRequest;\ntype WrappedRequestMethodFactory = (original: RequestMethod) => RequestMethod;\n\n/** */\nfunction createWrappedRequestFactory(\n  options: NetOptions,\n  tracePropagationTargets: TracePropagationTargets | undefined,\n): WrappedRequestMethodFactory {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const shouldCreateSpan = (method: string, url: string): boolean => {\n    if (options.tracing === undefined) {\n      return true;\n    }\n\n    if (options.tracing === false) {\n      return false;\n    }\n\n    const key = `${method}:${url}`;\n\n    const cachedDecision = createSpanUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = options.tracing === true || options.tracing(method, url);\n    createSpanUrlMap.set(key, decision);\n    return decision;\n  };\n\n  // This will be considerably simpler once `tracingOrigins` is removed in the next major release\n  const shouldAttachTraceData = (method: string, url: string): boolean => {\n    if (options.tracingOrigins === false) {\n      return false;\n    }\n\n    // Neither integration nor client options are set or integration option is set to true\n    if (\n      (options.tracingOrigins === undefined && tracePropagationTargets === undefined) ||\n      options.tracingOrigins === true\n    ) {\n      return true;\n    }\n\n    const key = `${method}:${url}`;\n\n    const cachedDecision = headersUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    if (tracePropagationTargets) {\n      const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n      headersUrlMap.set(key, decision);\n      return decision;\n    }\n\n    if (options.tracingOrigins) {\n      const decision = options.tracingOrigins(method, url);\n      headersUrlMap.set(key, decision);\n      return decision;\n    }\n\n    // We cannot reach here since either `tracePropagationTargets` or `tracingOrigins` will be defined but TypeScript\n    // cannot infer that\n    return true;\n  };\n\n  return function wrappedRequestMethodFactory(originalRequestMethod: RequestMethod): RequestMethod {\n    return function requestMethod(this: typeof net, reqOptions: RequestOptions): ClientRequest {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const netModule = this;\n\n      const { url, method } = parseOptions(reqOptions);\n      const request = originalRequestMethod.apply(netModule, [reqOptions]) as ClientRequest;\n\n      if (url.match(/sentry_key/) || request.getHeader('x-sentry-auth')) {\n        return request;\n      }\n\n      let span: Span | undefined;\n\n      const hub = getCurrentHub();\n      const scope = hub.getScope();\n      if (scope && shouldCreateSpan(method, url)) {\n        const parentSpan = scope.getSpan();\n\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: `${method} ${url}`,\n            op: 'http.client',\n          });\n\n          if (shouldAttachTraceData(method, url)) {\n            const sentryTraceHeader = span.toTraceparent();\n            const dynamicSamplingContext = span?.transaction?.getDynamicSamplingContext();\n\n            addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n          }\n        } else {\n          if (shouldAttachTraceData(method, url)) {\n            const { traceId, sampled, dsc } = scope.getPropagationContext();\n            const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n\n            const client = hub.getClient();\n            const dynamicSamplingContext =\n              dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n\n            addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n          }\n        }\n      }\n\n      return request\n        .once('response', function (this: ClientRequest, res: IncomingMessage): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('response', method, url, req, res);\n          }\n          if (span) {\n            if (res.statusCode) {\n              span.setHttpStatus(res.statusCode);\n            }\n            span.finish();\n          }\n        })\n        .once('error', function (this: ClientRequest, _error: Error): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('error', method, url, req, undefined);\n          }\n          if (span) {\n            span.setHttpStatus(500);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(\n  event: string,\n  method: string,\n  url: string,\n  req: ClientRequest,\n  res?: IncomingMessage,\n): void {\n  getCurrentHub().addBreadcrumb(\n    {\n      type: 'http',\n      category: 'electron.net',\n      data: {\n        url,\n        method: method,\n        status_code: res && res.statusCode,\n      },\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n"]}