{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/main/integrations/sentry-minidump/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureEvent, getCurrentHub, Scope } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Event, Integration } from '@sentry/types';\nimport { basename, logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { mergeEvents } from '../../../common';\nimport { getDefaultEnvironment, getDefaultReleaseName, getEventDefaults } from '../../context';\nimport { EXIT_REASONS, onChildProcessGone, onRendererProcessGone } from '../../electron-normalize';\nimport { sentryCachePath } from '../../fs';\nimport { getRendererProperties, trackRendererProperties } from '../../renderers';\nimport { ElectronMainOptions } from '../../sdk';\nimport { checkPreviousSession, sessionCrashed } from '../../sessions';\nimport { BufferedWriteStore } from '../../store';\nimport { deleteMinidump, getMinidumpLoader, MinidumpLoader } from './minidump-loader';\n\ninterface PreviousRun {\n  scope: Scope;\n  event?: Event;\n}\n\n/** Sends minidumps via the Sentry uploader */\nexport class SentryMinidump implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'SentryMinidump';\n\n  /** @inheritDoc */\n  public name: string = SentryMinidump.id;\n\n  /** Store to persist context information beyond application crashes. */\n  private _scopeStore?: BufferedWriteStore<PreviousRun>;\n\n  /** Temp store for the scope of last run */\n  private _scopeLastRun?: Promise<PreviousRun>;\n\n  private _minidumpLoader?: MinidumpLoader;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return;\n    }\n\n    this._startCrashReporter();\n\n    this._scopeStore = new BufferedWriteStore<PreviousRun>(sentryCachePath, 'scope_v3', {\n      scope: new Scope(),\n    });\n\n    // We need to store the scope in a variable here so it can be attached to minidumps\n    this._scopeLastRun = this._scopeStore.get();\n\n    const hub = getCurrentHub();\n    const client = hub.getClient<NodeClient>();\n    const options = client?.getOptions() as ElectronMainOptions;\n\n    const currentRelease = options?.release || getDefaultReleaseName();\n    const currentEnvironment = options?.environment || getDefaultEnvironment();\n\n    this._setupScopeListener(currentRelease, currentEnvironment);\n\n    if (!options?.dsn) {\n      throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n    }\n\n    trackRendererProperties();\n\n    this._minidumpLoader = getMinidumpLoader();\n\n    onRendererProcessGone(EXIT_REASONS, (contents, details) => this._sendRendererCrash(options, contents, details));\n    onChildProcessGone(EXIT_REASONS, (details) => this._sendChildProcessCrash(options, details));\n\n    // Start to submit recent minidump crashes. This will load breadcrumbs and\n    // context information that was cached on disk prior to the crash.\n    this._sendNativeCrashes({\n      level: 'fatal',\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': 'browser',\n        event_type: 'native',\n      },\n    })\n      .then((minidumpsFound) =>\n        // Check for previous uncompleted session. If a previous session exists\n        // and no minidumps were found, its likely an abnormal exit\n        checkPreviousSession(minidumpsFound),\n      )\n      .catch((error) => logger.error(error));\n  }\n\n  /** Starts the native crash reporter */\n  private _startCrashReporter(): void {\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      // Empty string doesn't work for Linux Crashpad and no submitURL doesn't work for older versions of Electron\n      submitURL: 'https://f.a.k/e',\n      uploadToServer: false,\n      compress: true,\n    });\n  }\n\n  /**\n   * Helper function for sending renderer crashes\n   */\n  private async _sendRendererCrash(\n    options: ElectronMainOptions,\n    contents: Electron.WebContents,\n    details: Partial<Electron.RenderProcessGoneDetails>,\n  ): Promise<void> {\n    const { getRendererName, release, environment } = options;\n    const crashedProcess = getRendererName?.(contents) || 'renderer';\n\n    logger.log(`'${crashedProcess}' process '${details.reason}'`);\n\n    const event = mergeEvents(await getEventDefaults(release, environment), {\n      contexts: {\n        electron: {\n          crashed_url: getRendererProperties(contents.id)?.url || 'unknown',\n          details,\n        },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': crashedProcess,\n        'exit.reason': details.reason,\n        event_type: 'native',\n      },\n    });\n\n    const found = await this._sendNativeCrashes(event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  /**\n   * Helper function for sending child process crashes\n   */\n  private async _sendChildProcessCrash(\n    options: ElectronMainOptions,\n    details: Omit<Electron.Details, 'exitCode'>,\n  ): Promise<void> {\n    logger.log(`${details.type} process has ${details.reason}`);\n\n    const { release, environment } = options;\n\n    const event = mergeEvents(await getEventDefaults(release, environment), {\n      contexts: {\n        electron: { details },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': details.type,\n        'exit.reason': details.reason,\n        event_type: 'native',\n      },\n    });\n\n    const found = await this._sendNativeCrashes(event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  /**\n   * Adds a scope listener to persist changes to disk.\n   */\n  private _setupScopeListener(currentRelease: string, currentEnvironment: string): void {\n    const scopeChanged = (updatedScope: Scope): void => {\n      const scope = Scope.clone(updatedScope);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (scope as any)._eventProcessors = [];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (scope as any)._scopeListeners = [];\n\n      // Since the initial scope read is async, we need to ensure that any writes do not beat that\n      // https://github.com/getsentry/sentry-electron/issues/585\n      setImmediate(async () => {\n        const event = await getEventDefaults(currentRelease, currentEnvironment);\n        void this._scopeStore?.set({\n          scope,\n          event,\n        });\n      });\n    };\n\n    const scope = getCurrentHub().getScope();\n\n    if (scope) {\n      scope.addScopeListener(scopeChanged);\n      // Ensure at least one event is written to disk\n      scopeChanged(scope);\n    }\n  }\n\n  /**\n   * Loads new native crashes from disk and sends them to Sentry.\n   *\n   * Returns true if one or more minidumps were found\n   */\n  private async _sendNativeCrashes(eventIn: Event): Promise<boolean> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    let event: Event | null = eventIn;\n\n    if (this._minidumpLoader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    try {\n      const minidumps = await this._minidumpLoader();\n\n      if (minidumps.length > 0) {\n        const hub = getCurrentHub();\n        const client = hub.getClient();\n\n        if (!client) {\n          return true;\n        }\n\n        const enabled = client.getOptions().enabled;\n\n        // If the SDK is not enabled, we delete the minidump files so they\n        // don't accumulate and/or get sent later\n        if (enabled === false) {\n          minidumps.forEach(deleteMinidump);\n          return false;\n        }\n\n        // If this is a native main process crash, we need to apply the scope and context from the previous run\n        if (event?.tags?.['event.process'] === 'browser') {\n          const previousRun = await this._scopeLastRun;\n\n          const storedScope = Scope.clone(previousRun?.scope);\n          event = await storedScope.applyToEvent(event);\n\n          if (event && previousRun) {\n            event.release = previousRun.event?.release || event.release;\n            event.environment = previousRun.event?.environment || event.environment;\n            event.contexts = previousRun.event?.contexts || event.contexts;\n          }\n        }\n\n        const hubScope = hub.getScope();\n        event = hubScope && event ? await hubScope.applyToEvent(event) : event;\n\n        if (!event) {\n          return false;\n        }\n\n        for (const minidump of minidumps) {\n          const data = await minidump.load();\n\n          if (data) {\n            captureEvent(event, {\n              attachments: [\n                {\n                  attachmentType: 'event.minidump',\n                  filename: basename(minidump.path),\n                  data,\n                },\n              ],\n            });\n          }\n\n          void deleteMinidump(minidump);\n        }\n\n        // Unset to recover memory\n        this._scopeLastRun = undefined;\n        return true;\n      }\n    } catch (_oO) {\n      logger.error('Error while sending native crash.');\n    }\n\n    return false;\n  }\n}\n"]}