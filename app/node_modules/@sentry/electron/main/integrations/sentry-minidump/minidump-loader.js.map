{"version":3,"file":"minidump-loader.js","sourceRoot":"","sources":["../../../src/main/integrations/sentry-minidump/minidump-loader.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '@sentry/utils';\nimport { join } from 'path';\n\nimport { getCrashesDirectory, usesCrashpad } from '../../electron-normalize';\nimport { readDirAsync, readFileAsync, statAsync, unlinkAsync } from '../../fs';\n\n/** Maximum number of days to keep a minidump before deleting it. */\nconst MAX_AGE = 30;\n\nexport interface MinidumpFile {\n  path: string;\n  load(): Promise<Uint8Array | undefined>;\n}\n\nexport type MinidumpLoader = () => Promise<MinidumpFile[]>;\n\nasync function filterAsync<T>(\n  array: T[],\n  predicate: (item: T) => Promise<boolean> | boolean,\n  thisArg?: any,\n): Promise<T[]> {\n  const verdicts = await Promise.all(array.map(predicate, thisArg));\n  return array.filter((_, index) => verdicts[index]);\n}\n\n/** Deletes a minidump */\nexport async function deleteMinidump(dump: MinidumpFile): Promise<void> {\n  try {\n    await unlinkAsync(dump.path);\n  } catch (e) {\n    logger.warn('Could not delete', dump.path);\n  }\n}\n\nfunction createMinidumpLoader(fetchMinidumpsImpl: MinidumpLoader): MinidumpLoader {\n  const knownPaths: string[] = [];\n\n  return async () => {\n    const minidumps = await fetchMinidumpsImpl();\n    logger.log(`Found ${minidumps.length} minidumps`);\n\n    const oldestMs = new Date().getTime() - MAX_AGE * 24 * 3_600 * 1_000;\n    return filterAsync(minidumps, async (dump) => {\n      // Skip files that we have seen before\n      if (knownPaths.indexOf(dump.path) >= 0) {\n        return false;\n      }\n\n      // Lock this minidump until we have uploaded it or an error occurs and we\n      // remove it from the file system.\n      knownPaths.push(dump.path);\n\n      // We do not want to upload minidumps that have been generated before a\n      // certain threshold. Those old files can be deleted immediately.\n      const stats = await statAsync(dump.path);\n      if (stats.birthtimeMs < oldestMs) {\n        await deleteMinidump(dump);\n        knownPaths.splice(knownPaths.indexOf(dump.path), 1);\n        return false;\n      }\n\n      return true;\n    });\n  };\n}\n\n/** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */\nasync function deleteCrashpadMetadataFile(crashesDirectory: string, waitMs: number = 100): Promise<void> {\n  if (waitMs > 2_000) {\n    return;\n  }\n\n  const metadataPath = join(crashesDirectory, 'metadata');\n  try {\n    await unlinkAsync(metadataPath);\n    logger.log('Deleted Crashpad metadata file', metadataPath);\n  } catch (e: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (e.code && e.code == 'EBUSY') {\n      // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing\n      // off and waiting longer each time.\n      setTimeout(async () => {\n        await deleteCrashpadMetadataFile(crashesDirectory, waitMs * 2);\n      }, waitMs);\n    }\n  }\n}\n\nasync function readDirsAsync(paths: string[]): Promise<string[]> {\n  const found: string[] = [];\n  for (const path of paths) {\n    try {\n      const files = await readDirAsync(path);\n      found.push(...files.map((file) => join(path, file)));\n    } catch (_) {\n      //\n    }\n  }\n  return found;\n}\n\nfunction crashpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = getCrashesDirectory();\n  const crashpadSubDirectory = process.platform === 'win32' ? 'reports' : 'completed';\n\n  const dumpDirectories = [join(crashesDirectory, crashpadSubDirectory)];\n\n  if (process.platform === 'darwin') {\n    dumpDirectories.push(join(crashesDirectory, 'pending'));\n  }\n\n  return createMinidumpLoader(async () => {\n    await deleteCrashpadMetadataFile(crashesDirectory).catch((error) => logger.error(error));\n\n    const files = await readDirsAsync(dumpDirectories);\n    return files\n      .filter((file) => file.endsWith('.dmp'))\n      .map((path) => {\n        return {\n          path,\n          load: () => readFileAsync(path),\n        };\n      });\n  });\n}\n\n/** Crudely parses the minidump from the Breakpad multipart file */\nfunction minidumpFromBreakpadMultipart(file: Buffer): Buffer | undefined {\n  const binaryStart = file.lastIndexOf('Content-Type: application/octet-stream');\n  if (binaryStart > 0) {\n    const dumpStart = file.indexOf('MDMP', binaryStart);\n    const dumpEnd = file.lastIndexOf('----------------------------');\n\n    if (dumpStart > 0 && dumpEnd > 0 && dumpEnd > dumpStart) {\n      return file.subarray(dumpStart, dumpEnd);\n    }\n  }\n\n  return undefined;\n}\n\nfunction removeBreakpadMetadata(crashesDirectory: string, paths: string[]): void {\n  // Remove all metadata files and forget about them.\n  void Promise.all(\n    paths\n      .filter((file) => file.endsWith('.txt') && !file.endsWith('log.txt'))\n      .map(async (file) => {\n        const path = join(crashesDirectory, file);\n        try {\n          await unlinkAsync(path);\n        } catch (e) {\n          logger.warn('Could not delete', path);\n        }\n      }),\n  );\n}\n\nfunction breakpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = getCrashesDirectory();\n\n  return createMinidumpLoader(async () => {\n    // Breakpad stores all minidump files along with a metadata file directly in\n    // the crashes directory.\n    const files = await readDirAsync(crashesDirectory);\n\n    removeBreakpadMetadata(crashesDirectory, files);\n\n    return files\n      .filter((file) => file.endsWith('.dmp'))\n      .map((file) => {\n        const path = join(crashesDirectory, file);\n\n        return {\n          path,\n          load: async () => {\n            const file = await readFileAsync(path);\n            return minidumpFromBreakpadMultipart(file) || file;\n          },\n        };\n      })\n      .filter((m) => !!m);\n  });\n}\n\n/**\n * Gets the minidump loader\n */\nexport function getMinidumpLoader(): MinidumpLoader {\n  return usesCrashpad() ? crashpadMinidumpLoader() : breakpadMinidumpLoader();\n}\n"]}