{"version":3,"file":"main-process-session.js","sourceRoot":"","sources":["../../src/main/integrations/main-process-session.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AACvC,uCAA+B;AAE/B,0CAAuD;AAEvD,oDAAoD;AACpD,MAAa,kBAAkB;IAA/B;QAIE,kBAAkB;QACX,SAAI,GAAW,kBAAkB,CAAC,EAAE,CAAC;QA2B5C,uBAAuB;QACf,iBAAY,GAA6C,CAAO,KAAqB,EAAE,EAAE;YAC/F,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBAC1B,OAAO;aACR;YAED,cAAM,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YAEhD,oDAAoD;YACpD,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,IAAI;gBACF,kBAAkB;gBAClB,MAAM,IAAA,qBAAU,GAAE,CAAC;aACpB;YAAC,OAAO,CAAC,EAAE;gBACV,yDAAyD;gBACzD,cAAM,CAAC,IAAI,CAAC,4CAA4C,EAAE,CAAC,CAAC,CAAC;aAC9D;YAED,cAAG,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAA,CAAC;IACJ,CAAC;IA9CC,kBAAkB;IACX,SAAS;QACd,KAAK,IAAA,uBAAY,GAAE,CAAC;QAEpB,4FAA4F;QAC5F,EAAE;QACF,+GAA+G;QAC/G,iCAAiC;QACjC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B,mHAAmH;QACnH,oBAAoB;QACpB,cAAG,CAAC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,cAAG,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACnD,cAAG,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;;AA9BH,gDAqDC;AApDC,kBAAkB;AACJ,qBAAE,GAAW,oBAAoB,CAAC","sourcesContent":["import { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { app } from 'electron';\n\nimport { endSession, startSession } from '../sessions';\n\n/** Tracks sessions as the main process lifetime. */\nexport class MainProcessSession implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'MainProcessSession';\n\n  /** @inheritDoc */\n  public name: string = MainProcessSession.id;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    void startSession();\n\n    // We track sessions via the 'will-quit' event which is the last event emitted before close.\n    //\n    // We need to be the last 'will-quit' listener so as not to interfere with any user defined listeners which may\n    // call `event.preventDefault()`.\n    this._ensureExitHandlerLast();\n\n    // 'before-quit' is always called before 'will-quit' so we listen there and ensure our 'will-quit' handler is still\n    // the last listener\n    app.on('before-quit', () => {\n      this._ensureExitHandlerLast();\n    });\n  }\n\n  /**\n   * Hooks 'will-quit' and ensures the handler is always last\n   */\n  private _ensureExitHandlerLast(): void {\n    app.removeListener('will-quit', this._exitHandler);\n    app.on('will-quit', this._exitHandler);\n  }\n\n  /** Handles the exit */\n  private _exitHandler: (event: Electron.Event) => Promise<void> = async (event: Electron.Event) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    logger.log('[MainProcessSession] Exit Handler');\n\n    // Stop the exit so we have time to send the session\n    event.preventDefault();\n\n    try {\n      // End the session\n      await endSession();\n    } catch (e) {\n      // Ignore and log any errors which would prevent app exit\n      logger.warn('[MainProcessSession] Error ending session:', e);\n    }\n\n    app.exit();\n  };\n}\n"]}