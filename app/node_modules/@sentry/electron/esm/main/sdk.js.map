{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/main/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { ensureProcess, IPCMode } from '../common';\nensureProcess('main');\n\nimport { defaultIntegrations as defaultNodeIntegrations, init as nodeInit, NodeOptions } from '@sentry/node';\nimport { Integration, Options } from '@sentry/types';\nimport { Session, session, WebContents } from 'electron';\n\nimport { getDefaultEnvironment, getDefaultReleaseName } from './context';\nimport {\n  AdditionalContext,\n  ChildProcess,\n  ElectronBreadcrumbs,\n  MainContext,\n  MainProcessSession,\n  Net,\n  OnUncaughtException,\n  PreloadInjection,\n  Screenshots,\n  SentryMinidump,\n} from './integrations';\nimport { configureIPC } from './ipc';\nimport { defaultStackParser } from './stack-parse';\nimport { ElectronOfflineTransportOptions, makeElectronOfflineTransport } from './transports/electron-offline-net';\nimport { SDK_VERSION } from './version';\n\nexport const defaultIntegrations: Integration[] = [\n  new SentryMinidump(),\n  new ElectronBreadcrumbs(),\n  new Net(),\n  new MainContext(),\n  new ChildProcess(),\n  new OnUncaughtException(),\n  new PreloadInjection(),\n  new AdditionalContext(),\n  new Screenshots(),\n  ...defaultNodeIntegrations.filter(\n    (integration) => integration.name !== 'OnUncaughtException' && integration.name !== 'Context',\n  ),\n];\n\nexport interface ElectronMainOptionsInternal extends Options<ElectronOfflineTransportOptions> {\n  /**\n   * Inter-process communication mode to receive event and scope from renderers\n   *\n   * IPCMode.Classic - Configures Electron IPC\n   * IPCMode.Protocol - Configures a custom protocol\n   * IPCMode.Both - Configures both IPC and custom protocol\n   *\n   * defaults to IPCMode.Both for maximum compatibility\n   */\n  ipcMode: IPCMode;\n\n  /**\n   * A function that returns an array of Electron session objects\n   *\n   * These sessions are used to configure communication between the Electron\n   * main and renderer processes.\n   *\n   * Defaults to () => [session.defaultSession]\n   */\n  getSessions: () => Session[];\n\n  /**\n   * Callback to allow custom naming of renderer processes.\n   *\n   * If the callback is not set, or it returns `undefined`, the default naming\n   * scheme is used.\n   */\n  getRendererName?: (contents: WebContents) => string | undefined;\n\n  /**\n   * Screenshots may contain PII and is an opt-in feature\n   *\n   * If set to true, screenshots will be captured and included with all JavaScript events.\n   * Screenshots are not included for native crashes since it's not possible to capture images of crashed Electron\n   * renderers.\n   */\n  attachScreenshot?: boolean;\n}\n\n// getSessions and ipcMode properties are optional because they have defaults\nexport type ElectronMainOptions = Pick<Partial<ElectronMainOptionsInternal>, 'getSessions' | 'ipcMode'> &\n  Omit<ElectronMainOptionsInternal, 'getSessions' | 'ipcMode'> &\n  NodeOptions;\n\nconst defaultOptions: ElectronMainOptionsInternal = {\n  _metadata: { sdk: { name: 'sentry.javascript.electron', version: SDK_VERSION } },\n  ipcMode: IPCMode.Both,\n  getSessions: () => [session.defaultSession],\n};\n\n/**\n * Initialize Sentry in the Electron main process\n */\nexport function init(userOptions: ElectronMainOptions): void {\n  const options: ElectronMainOptionsInternal = Object.assign(defaultOptions, userOptions);\n  const defaults = defaultIntegrations;\n\n  // If we don't set a release, @sentry/node will automatically fetch from environment variables\n  if (options.release === undefined) {\n    options.release = getDefaultReleaseName();\n  }\n\n  // If we don't set an environment, @sentry/core defaults to production\n  if (options.environment === undefined) {\n    options.environment = getDefaultEnvironment();\n  }\n\n  // Unless autoSessionTracking is specifically disabled, we track sessions as the\n  // lifetime of the Electron main process\n  if (options.autoSessionTracking !== false) {\n    defaults.push(new MainProcessSession());\n    // We don't want nodejs autoSessionTracking\n    options.autoSessionTracking = false;\n  }\n\n  if (options.stackParser === undefined) {\n    options.stackParser = defaultStackParser;\n  }\n\n  setDefaultIntegrations(defaults, options);\n\n  if (options.dsn && options.transport === undefined) {\n    options.transport = makeElectronOfflineTransport;\n  }\n\n  configureIPC(options);\n  nodeInit(options);\n}\n\n/** Sets the default integrations and ensures that multiple minidump integrations are not enabled */\nfunction setDefaultIntegrations(defaults: Integration[], options: ElectronMainOptions): void {\n  if (options.defaultIntegrations === undefined) {\n    // If ElectronMinidump has been included, automatically remove SentryMinidump\n    if (Array.isArray(options.integrations) && options.integrations.some((i) => i.name === 'ElectronMinidump')) {\n      options.defaultIntegrations = defaults.filter((integration) => integration.name !== 'SentryMinidump');\n      return;\n    } else if (typeof options.integrations === 'function') {\n      const originalFn = options.integrations;\n\n      options.integrations = (integrations) => {\n        const userIntegrations = originalFn(integrations);\n        return userIntegrations.some((i) => i.name === 'ElectronMinidump')\n          ? userIntegrations.filter((integration) => integration.name !== 'SentryMinidump')\n          : userIntegrations;\n      };\n    }\n\n    options.defaultIntegrations = defaults;\n  }\n}\n"]}