{"version":3,"file":"renderers.js","sourceRoot":"","sources":["../../src/main/renderers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAE/B,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AACzC,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAQ5D,IAAI,SAA4C,CAAC;AAEjD;;;;IAII;AACJ,MAAM,UAAU,uBAAuB;IACrC,IAAI,SAAS,EAAE;QACb,OAAO;KACR;IAED,MAAM,SAAS,GAAG,CAAC,SAAS,GAAG,IAAI,GAAG,EAAoB,CAAC,CAAC;IAE5D,SAAS,SAAS,CAAC,EAAU,EAAE,GAAW;QACxC,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;QAC1C,KAAK,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QAChD,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,WAAW,CAAC,EAAU,EAAE,KAAa;QAC5C,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;QAC1C,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,oBAAoB,CAAC,CAAC,QAAQ,EAAE,EAAE;QAChC,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;QAEvB,QAAQ,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAC5D,QAAQ,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QACpE,QAAQ,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;QAExE,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YAC5B,iEAAiE;YACjE,yDAAyD;YACzD,UAAU,CAAC,GAAG,EAAE;gBACd,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,yCAAyC;AACzC,MAAM,UAAU,qBAAqB,CAAC,EAAU;IAC9C,OAAO,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["import { app } from 'electron';\n\nimport { normalizeUrl } from '../common';\nimport { onWebContentsCreated } from './electron-normalize';\n\ninterface Renderer {\n  id: number;\n  url?: string;\n  title?: string;\n}\n\nlet RENDERERS: Map<number, Renderer> | undefined;\n\n/**\n * Enable tracking of renderer properties via events\n *\n * This allows us to get the last known state of a renderer even if it's been destroyed\n **/\nexport function trackRendererProperties(): void {\n  if (RENDERERS) {\n    return;\n  }\n\n  const renderers = (RENDERERS = new Map<number, Renderer>());\n\n  function updateUrl(id: number, url: string): void {\n    const state = renderers.get(id) || { id };\n    state.url = normalizeUrl(url, app.getAppPath());\n    renderers.set(id, state);\n  }\n\n  function updateTitle(id: number, title: string): void {\n    const state = renderers.get(id) || { id };\n    state.title = title;\n    renderers.set(id, state);\n  }\n\n  onWebContentsCreated((contents) => {\n    const id = contents.id;\n\n    contents.on('did-navigate', (_, url) => updateUrl(id, url));\n    contents.on('did-navigate-in-page', (_, url) => updateUrl(id, url));\n    contents.on('page-title-updated', (_, title) => updateTitle(id, title));\n\n    contents.on('destroyed', () => {\n      // We need to delay since consumers of this API sometimes need to\n      // access the state shortly after a renderer is destroyed\n      setTimeout(() => {\n        renderers.delete(id);\n      }, 5000);\n    });\n  });\n}\n\n/** Gets the properties for a renderer */\nexport function getRendererProperties(id: number): Renderer | undefined {\n  return RENDERERS?.get(id);\n}\n"]}