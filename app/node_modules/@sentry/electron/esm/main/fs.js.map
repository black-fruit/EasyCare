{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../src/main/fs.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC;AACzF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAEjC,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;AAEvE,MAAM,CAAC,MAAM,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;AACnD,MAAM,CAAC,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;AACjD,MAAM,CAAC,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AAC3C,MAAM,CAAC,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACzC,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;AAC7C,MAAM,CAAC,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;AAC/C,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;AAE7C,kDAAkD;AAElD;;;;;GAKG;AACH,MAAM,UAAgB,MAAM,CAAC,IAAY;;QACvC,sCAAsC;QACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI;YACF,MAAM,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SACnC;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,KAAK,GAAG,GAAuB,CAAC;YACtC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACpC,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChC,MAAM,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACnC;YAED,IAAI;gBACF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE;oBACrC,MAAM,GAAG,CAAC;iBACX;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,GAAG,CAAC;aACX;SACF;IACH,CAAC;CAAA","sourcesContent":["import { app } from 'electron';\nimport { mkdir, readdir, readFile, rename, stat, statSync, unlink, writeFile } from 'fs';\nimport { dirname, join, resolve } from 'path';\nimport { promisify } from 'util';\n\nexport const sentryCachePath = join(app.getPath('userData'), 'sentry');\n\nexport const writeFileAsync = promisify(writeFile);\nexport const readFileAsync = promisify(readFile);\nexport const mkdirAsync = promisify(mkdir);\nexport const statAsync = promisify(stat);\nexport const unlinkAsync = promisify(unlink);\nexport const readDirAsync = promisify(readdir);\nexport const renameAsync = promisify(rename);\n\n// mkdir with recursive was only added in Node 10+\n\n/**\n * Recursively creates the given path.\n *\n * @param path A relative or absolute path to create.\n * @returns A Promise that resolves when the path has been created.\n */\nexport async function mkdirp(path: string): Promise<void> {\n  // eslint-disable-next-line no-bitwise\n  const realPath = resolve(path);\n\n  try {\n    await mkdirAsync(realPath, 0o777);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      await mkdirp(dirname(realPath));\n      await mkdirAsync(realPath, 0o777);\n    }\n\n    try {\n      if (!statSync(realPath).isDirectory()) {\n        throw err;\n      }\n    } catch (_) {\n      throw err;\n    }\n  }\n}\n"]}