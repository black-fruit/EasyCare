{"version":3,"file":"ipc.js","sourceRoot":"","sources":["../../src/main/ipc.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureEvent, configureScope, getCurrentHub, Scope } from '@sentry/core';\nimport { Attachment, AttachmentItem, Envelope, Event, EventItem } from '@sentry/types';\nimport { forEachEnvelopeItem, logger, parseEnvelope, SentryError } from '@sentry/utils';\nimport { app, ipcMain, protocol, WebContents } from 'electron';\nimport { TextDecoder, TextEncoder } from 'util';\n\nimport { IPCChannel, IPCMode, mergeEvents, normalizeUrlsInReplayEnvelope, PROTOCOL_SCHEME } from '../common';\nimport { registerProtocol, supportsFullProtocol, whenAppReady } from './electron-normalize';\nimport { ElectronMainOptionsInternal } from './sdk';\n\nfunction captureEventFromRenderer(\n  options: ElectronMainOptionsInternal,\n  event: Event,\n  attachments: Attachment[],\n  contents?: WebContents,\n): void {\n  const process = contents ? options?.getRendererName?.(contents) || 'renderer' : 'renderer';\n\n  // Ensure breadcrumbs are empty as they sent via scope updates\n  event.breadcrumbs = event.breadcrumbs || [];\n\n  // Remove the environment as it defaults to 'production' and overwrites the main process environment\n  delete event.environment;\n\n  // Remove the SDK info as we want the Electron SDK to be the one reporting the event\n  delete event.sdk?.name;\n  delete event.sdk?.version;\n  delete event.sdk?.packages;\n\n  captureEvent(mergeEvents(event, { tags: { 'event.process': process } }), { attachments });\n}\n\nfunction handleEvent(options: ElectronMainOptionsInternal, jsonEvent: string, contents?: WebContents): void {\n  let event: Event;\n  try {\n    event = JSON.parse(jsonEvent) as Event;\n  } catch {\n    logger.warn('sentry-electron received an invalid event message');\n    return;\n  }\n\n  captureEventFromRenderer(options, event, [], contents);\n}\n\nfunction eventFromEnvelope(envelope: Envelope): [Event, Attachment[]] | undefined {\n  let event: Event | undefined;\n  const attachments: Attachment[] = [];\n\n  forEachEnvelopeItem(envelope, (item, type) => {\n    if (type === 'event' || type === 'transaction') {\n      event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n    } else if (type === 'attachment') {\n      const [headers, data] = item as AttachmentItem;\n\n      attachments.push({\n        filename: headers.filename,\n        attachmentType: headers.attachment_type,\n        contentType: headers.content_type,\n        data,\n      });\n    }\n  });\n\n  return event ? [event, attachments] : undefined;\n}\n\nfunction handleEnvelope(options: ElectronMainOptionsInternal, env: Uint8Array | string, contents?: WebContents): void {\n  const envelope = parseEnvelope(env, new TextEncoder(), new TextDecoder());\n\n  const eventAndAttachments = eventFromEnvelope(envelope);\n  if (eventAndAttachments) {\n    const [event, attachments] = eventAndAttachments;\n    captureEventFromRenderer(options, event, attachments, contents);\n  } else {\n    const normalizedEnvelope = normalizeUrlsInReplayEnvelope(envelope, app.getAppPath());\n    // Pass other types of envelope straight to the transport\n    void getCurrentHub().getClient()?.getTransport()?.send(normalizedEnvelope);\n  }\n}\n\n/** Is object defined and has keys */\nfunction hasKeys(obj: any): boolean {\n  return obj != undefined && Object.keys(obj).length > 0;\n}\n\n/**\n * Handle scope updates from renderer processes\n */\nfunction handleScope(options: ElectronMainOptionsInternal, jsonScope: string): void {\n  let rendererScope: Scope;\n  try {\n    rendererScope = JSON.parse(jsonScope) as Scope;\n  } catch {\n    logger.warn('sentry-electron received an invalid scope message');\n    return;\n  }\n\n  const sentScope = Scope.clone(rendererScope) as any;\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  configureScope((scope) => {\n    if (hasKeys(sentScope._user)) {\n      scope.setUser(sentScope._user);\n    }\n\n    if (hasKeys(sentScope._tags)) {\n      scope.setTags(sentScope._tags);\n    }\n\n    if (hasKeys(sentScope._extra)) {\n      scope.setExtras(sentScope._extra);\n    }\n\n    for (const attachment of sentScope._attachments || []) {\n      scope.addAttachment(attachment);\n    }\n\n    const breadcrumb = sentScope._breadcrumbs.pop();\n    if (breadcrumb) {\n      scope.addBreadcrumb(breadcrumb, options?.maxBreadcrumbs || 100);\n    }\n  });\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/** Enables Electron protocol handling */\nfunction configureProtocol(options: ElectronMainOptionsInternal): void {\n  if (app.isReady()) {\n    throw new SentryError(\"Sentry SDK should be initialized before the Electron app 'ready' event is fired\");\n  }\n\n  protocol.registerSchemesAsPrivileged([\n    {\n      scheme: PROTOCOL_SCHEME,\n      privileges: { bypassCSP: true, corsEnabled: true, supportFetchAPI: true, secure: true },\n    },\n  ]);\n\n  whenAppReady\n    .then(() => {\n      for (const sesh of options.getSessions()) {\n        registerProtocol(sesh.protocol, PROTOCOL_SCHEME, (request) => {\n          const data = request.body;\n\n          if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.EVENT}`) && data) {\n            handleEvent(options, data.toString());\n          } else if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.SCOPE}`) && data) {\n            handleScope(options, data.toString());\n          } else if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.ENVELOPE}`) && data) {\n            handleEnvelope(options, data);\n          }\n        });\n      }\n    })\n    .catch((error) => logger.error(error));\n}\n\n/**\n * Hooks IPC for communication with the renderer processes\n */\nfunction configureClassic(options: ElectronMainOptionsInternal): void {\n  ipcMain.on(IPCChannel.EVENT, ({ sender }, jsonEvent: string) => handleEvent(options, jsonEvent, sender));\n  ipcMain.on(IPCChannel.SCOPE, (_, jsonScope: string) => handleScope(options, jsonScope));\n  ipcMain.on(IPCChannel.ENVELOPE, ({ sender }, env: Uint8Array | string) => handleEnvelope(options, env, sender));\n}\n\n/** Sets up communication channels with the renderer */\nexport function configureIPC(options: ElectronMainOptionsInternal): void {\n  if (!supportsFullProtocol() && options.ipcMode === IPCMode.Protocol) {\n    throw new SentryError('IPCMode.Protocol is only supported in Electron >= v5');\n  }\n\n  // eslint-disable-next-line no-bitwise\n  if (supportsFullProtocol() && (options.ipcMode & IPCMode.Protocol) > 0) {\n    configureProtocol(options);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  if ((options.ipcMode & IPCMode.Classic) > 0) {\n    configureClassic(options);\n  }\n}\n"]}