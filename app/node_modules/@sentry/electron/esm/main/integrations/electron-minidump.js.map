{"version":3,"file":"electron-minidump.js","sourceRoot":"","sources":["../../../src/main/integrations/electron-minidump.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { NodeClient, NodeOptions } from '@sentry/node';\nimport { Event, Integration } from '@sentry/types';\nimport { logger, makeDsn, SentryError } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { mergeEvents, normalizeEvent } from '../../common';\nimport { getEventDefaults } from '../context';\nimport {\n  CRASH_REASONS,\n  onRendererProcessGone,\n  rendererRequiresCrashReporterStart,\n  usesCrashpad,\n} from '../electron-normalize';\nimport { checkPreviousSession, sessionCrashed, unreportedDuringLastSession } from '../sessions';\n\n/** Is object defined and has keys */\nfunction hasKeys(obj: any): boolean {\n  return obj != undefined && Object.keys(obj).length > 0;\n}\n\n/** Gets a Scope object with user, tags and extra */\nfunction getScope(options: NodeOptions): Event {\n  const scope = getCurrentHub().getScope() as any | undefined;\n\n  if (!scope) {\n    return {};\n  }\n\n  return {\n    release: options.release,\n    environment: options.environment,\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    ...(hasKeys(scope._user) && { user: scope._user }),\n    ...(hasKeys(scope._tags) && { tags: scope._tags }),\n    ...(hasKeys(scope._extra) && { extra: scope._extra }),\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  };\n}\n\n/**\n * Returns the minidump endpoint in Sentry\n * @param dsn Dsn\n */\nexport function minidumpUrlFromDsn(dsn: string): string | undefined {\n  const dsnComponents = makeDsn(dsn);\n  if (!dsnComponents) {\n    return undefined;\n  }\n  const { host, path, projectId, port, protocol, publicKey } = dsnComponents;\n  return `${protocol}://${host}${port !== '' ? `:${port}` : ''}${\n    path !== '' ? `/${path}` : ''\n  }/api/${projectId}/minidump/?sentry_key=${publicKey}`;\n}\n\n/** Sends minidumps via the Electron built-in uploader. */\nexport class ElectronMinidump implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'ElectronMinidump';\n\n  /** @inheritDoc */\n  public name: string = ElectronMinidump.id;\n\n  /** Counter used to ensure no race condition when updating extra params */\n  private _updateEpoch: number = 0;\n\n  private _customRelease: string | undefined;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return;\n    }\n\n    if (rendererRequiresCrashReporterStart()) {\n      throw new SentryError(`The '${this.name}' integration is only supported with Electron >= v9`);\n    }\n\n    const options = getCurrentHub().getClient<NodeClient>()?.getOptions();\n\n    if (!options?.dsn) {\n      throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n    }\n\n    this._customRelease = options.release;\n\n    this._startCrashReporter(options);\n\n    // If a renderer process crashes, mark any existing session as crashed\n    onRendererProcessGone(CRASH_REASONS, (_, __) => {\n      sessionCrashed();\n    });\n\n    // If we're using the Crashpad minidump uploader, we set extra parameters whenever the scope updates\n    if (usesCrashpad()) {\n      this._setupScopeListener();\n    }\n\n    // Check if last crash report was likely to have been unreported in the last session\n    void unreportedDuringLastSession(crashReporter.getLastCrashReport()?.date).then((crashed) => {\n      // Check if a previous session was not closed\n      checkPreviousSession(crashed).catch((error) => logger.error(error));\n    });\n  }\n\n  /**\n   * Starts the native crash reporter\n   */\n  private _startCrashReporter(options: NodeOptions): void {\n    const submitURL = minidumpUrlFromDsn(options.dsn || '');\n    if (!submitURL) {\n      logger.log('Invalid DSN. Cannot start Electron crashReporter');\n      return;\n    }\n\n    // We don't add globalExtra when Breakpad is in use because it doesn't support JSON like strings:\n    // https://github.com/electron/electron/issues/29711\n    const globalExtra = usesCrashpad() ? { sentry___initialScope: JSON.stringify(getScope(options)) } : undefined;\n\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      submitURL,\n      uploadToServer: true,\n      compress: true,\n      globalExtra,\n    });\n  }\n\n  /**\n   * Adds a scope listener to persist changes to disk.\n   */\n  private _setupScopeListener(): void {\n    const hubScope = getCurrentHub().getScope();\n    if (hubScope) {\n      hubScope.addScopeListener((updatedScope) => {\n        const scope = Scope.clone(updatedScope);\n        /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n        (scope as any)._eventProcessors = [];\n        (scope as any)._scopeListeners = [];\n        /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n        this._updateExtraParams(scope);\n      });\n    }\n  }\n\n  /** Updates Electron uploader extra params */\n  private _updateExtraParams(scope: Scope): void {\n    this._updateEpoch += 1;\n    const currentEpoch = this._updateEpoch;\n\n    this._getNativeUploaderEvent(scope)\n      .then((event) => {\n        if (currentEpoch !== this._updateEpoch) return;\n\n        // Update the extra parameters in the main process\n        const mainParams = this._getNativeUploaderExtraParams(event);\n        for (const key of Object.keys(mainParams)) {\n          crashReporter.addExtraParameter(key, mainParams[key]);\n        }\n      })\n      .catch((error) => logger.error(error));\n  }\n\n  /** Builds up an event to send with the native Electron uploader */\n  private async _getNativeUploaderEvent(scope: Scope): Promise<Event> {\n    const event = mergeEvents(await getEventDefaults(this._customRelease), {\n      level: 'fatal',\n      platform: 'native',\n      tags: { 'event.environment': 'native', event_type: 'native' },\n    });\n\n    // Apply the scope to the event\n    await scope.applyToEvent(event);\n\n    delete event.sdkProcessingMetadata;\n\n    // Normalise paths\n    return normalizeEvent(event, app.getAppPath());\n  }\n\n  /** Chunks up event JSON into 1 or more parameters for use with the native Electron uploader\n   *\n   * Returns chunks with keys and values:\n   * {\n   *    sentry__1: '{ json...',\n   *    sentry__2: 'more json...',\n   *    sentry__x: 'end json }',\n   * }\n   */\n  private _getNativeUploaderExtraParams(event: Event): { [key: string]: string } {\n    const maxBytes = 20300;\n\n    /** Max chunk sizes are in bytes so we can't chunk by characters or UTF8 could bite us.\n     *\n     * We attempt to split by space (32) and double quote characters (34) as there are plenty in JSON\n     * and they are guaranteed to not be the first byte of a multi-byte UTF8 character.\n     */\n    let buf = Buffer.from(JSON.stringify(event));\n    const chunks = [];\n    while (buf.length) {\n      // Find last '\"'\n      let i = buf.lastIndexOf(34, maxBytes + 1);\n      // Or find last ' '\n      if (i < 0) i = buf.lastIndexOf(32, maxBytes + 1);\n      // Or find first '\"'\n      if (i < 0) i = buf.indexOf(34, maxBytes);\n      // Or find first ' '\n      if (i < 0) i = buf.indexOf(32, maxBytes);\n      // We couldn't find any space or quote chars so split at maxBytes and hope for the best 🤷‍♂️\n      if (i < 0) i = maxBytes;\n      chunks.push(buf.subarray(0, i + 1).toString());\n      buf = buf.subarray(i + 1);\n    }\n\n    return chunks.reduce((acc, cur, i) => {\n      acc[`sentry__${i + 1}`] = cur;\n      return acc;\n    }, {} as { [key: string]: string });\n  }\n}\n"]}