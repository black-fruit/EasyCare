{"version":3,"file":"additional-context.js","sourceRoot":"","sources":["../../../src/main/integrations/additional-context.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceContext, Event, EventProcessor, Integration } from '@sentry/types';\nimport { app, screen as electronScreen } from 'electron';\nimport { CpuInfo, cpus } from 'os';\n\nimport { mergeEvents } from '../../common';\nimport { whenAppReady } from '../electron-normalize';\n\nexport interface AdditionalContextOptions {\n  cpu: boolean;\n  screen: boolean;\n  memory: boolean;\n  language: boolean;\n}\n\nconst DEFAULT_OPTIONS: AdditionalContextOptions = {\n  cpu: true,\n  screen: true,\n  memory: true,\n  language: true,\n};\n\n/** Adds Electron context to events and normalises paths. */\nexport class AdditionalContext implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'AdditionalContext';\n\n  /** @inheritDoc */\n  public name: string = AdditionalContext.id;\n\n  private readonly _options: AdditionalContextOptions;\n  private _lazyDeviceContext: DeviceContext = {};\n\n  public constructor(options: Partial<AdditionalContextOptions> = {}) {\n    this._options = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n  }\n\n  /** @inheritDoc */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    addGlobalEventProcessor(async (event: Event) => this._addAdditionalContext(event));\n\n    // Some metrics are only available after app ready so we lazily load them\n    void whenAppReady.then(() => {\n      const { language, screen } = this._options;\n\n      if (language) {\n        this._lazyDeviceContext.language = app.getLocale();\n      }\n\n      if (screen) {\n        this._setPrimaryDisplayInfo();\n\n        electronScreen.on('display-metrics-changed', () => {\n          this._setPrimaryDisplayInfo();\n        });\n      }\n    });\n  }\n\n  /** Adds additional context to event */\n  private _addAdditionalContext(event: Event): Event {\n    const device: DeviceContext = this._lazyDeviceContext;\n\n    const { memory, cpu } = this._options;\n\n    if (memory) {\n      const { total, free } = process.getSystemMemoryInfo();\n      device.memory_size = total * 1024;\n      device.free_memory = free * 1024;\n    }\n\n    if (cpu) {\n      const cpuInfo: CpuInfo[] | undefined = cpus();\n      if (cpuInfo && cpuInfo.length) {\n        const firstCpu = cpuInfo[0];\n\n        device.processor_count = cpuInfo.length;\n        device.cpu_description = firstCpu.model;\n        device.processor_frequency = firstCpu.speed;\n\n        if (app.runningUnderARM64Translation) {\n          device.machine_arch = 'arm64';\n        }\n      }\n    }\n\n    return mergeEvents(event, { contexts: { device } });\n  }\n\n  /** Sets the display info */\n  private _setPrimaryDisplayInfo(): void {\n    const display = electronScreen.getPrimaryDisplay();\n    const width = Math.floor(display.size.width * display.scaleFactor);\n    const height = Math.floor(display.size.height * display.scaleFactor);\n    this._lazyDeviceContext.screen_density = display.scaleFactor;\n    this._lazyDeviceContext.screen_resolution = `${width}x${height}`;\n  }\n}\n"]}