{"version":3,"file":"electron-breadcrumbs.js","sourceRoot":"","sources":["../../../src/main/integrations/electron-breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["import { addBreadcrumb, getCurrentHub } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Breadcrumb, Integration } from '@sentry/types';\nimport { app, autoUpdater, BrowserWindow, powerMonitor, screen, WebContents } from 'electron';\n\nimport { onBrowserWindowCreated, onWebContentsCreated, whenAppReady } from '../electron-normalize';\nimport { getRendererProperties, trackRendererProperties } from '../renderers';\nimport { ElectronMainOptions } from '../sdk';\n\n/** A function that returns true if the named event should create breadcrumbs */\ntype EventFunction = (name: string) => boolean;\ntype EventTypes = boolean | string[] | EventFunction | undefined;\n\ninterface ElectronBreadcrumbsOptions<T> {\n  /**\n   * app events\n   *\n   * default: (name) => !name.startsWith('remote-')\n   */\n  app: T;\n  /**\n   * autoUpdater events\n   *\n   * default: all\n   */\n  autoUpdater: T;\n  /**\n   * webContents events\n   * default: ['dom-ready', 'context-menu', 'load-url', 'destroyed']\n   */\n  webContents: T;\n  /**\n   * BrowserWindow events\n   *\n   * default: ['closed', 'close', 'unresponsive', 'responsive', 'show', 'blur', 'focus', 'hide',\n   *            'maximize', 'minimize', 'restore', 'enter-full-screen', 'leave-full-screen' ]\n   */\n  browserWindow: T;\n  /**\n   * screen events\n   *\n   * default: all\n   */\n  screen: T;\n  /**\n   * powerMonitor events\n   *\n   * default: all\n   */\n  powerMonitor: T;\n\n  /**\n   * Whether to capture window titles with webContents/browserWindow breadcrumbs\n   *\n   * default: false\n   */\n  captureWindowTitles: boolean;\n}\n\nconst DEFAULT_OPTIONS: ElectronBreadcrumbsOptions<EventFunction> = {\n  // We exclude events starting with remote as they can be quite verbose\n  app: (name) => !name.startsWith('remote-'),\n  autoUpdater: () => true,\n  webContents: (name) => ['dom-ready', 'context-menu', 'load-url', 'destroyed'].includes(name),\n  browserWindow: (name) =>\n    [\n      'closed',\n      'close',\n      'unresponsive',\n      'responsive',\n      'show',\n      'blur',\n      'focus',\n      'hide',\n      'maximize',\n      'minimize',\n      'restore',\n      'enter-full-screen',\n      'leave-full-screen',\n    ].includes(name),\n  screen: () => true,\n  powerMonitor: () => true,\n  captureWindowTitles: false,\n};\n\n/** Converts all user supplied options to function | false */\nexport function normalizeOptions(\n  options: Partial<ElectronBreadcrumbsOptions<EventTypes>>,\n): Partial<ElectronBreadcrumbsOptions<EventFunction | false>> {\n  return (Object.keys(options) as (keyof ElectronBreadcrumbsOptions<EventTypes>)[]).reduce((obj, k) => {\n    if (k === 'captureWindowTitles') {\n      obj[k] = !!options[k];\n    } else {\n      const val: EventTypes = options[k];\n      if (Array.isArray(val)) {\n        obj[k] = (name) => val.includes(name);\n      } else if (typeof val === 'function' || val === false) {\n        obj[k] = val;\n      }\n    }\n\n    return obj;\n  }, {} as Partial<ElectronBreadcrumbsOptions<EventFunction | false>>);\n}\n\n/** Adds breadcrumbs for Electron events. */\nexport class ElectronBreadcrumbs implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'ElectronBreadcrumbs';\n\n  /** @inheritDoc */\n  public name: string = ElectronBreadcrumbs.id;\n\n  private readonly _options: ElectronBreadcrumbsOptions<EventFunction | false>;\n\n  /**\n   * @param _options Integration options\n   */\n  public constructor(options: Partial<ElectronBreadcrumbsOptions<EventTypes>> = {}) {\n    this._options = { ...DEFAULT_OPTIONS, ...normalizeOptions(options) };\n  }\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    const initOptions = getCurrentHub().getClient<NodeClient>()?.getOptions() as ElectronMainOptions | undefined;\n\n    trackRendererProperties();\n\n    void whenAppReady.then(() => {\n      // We can't access these until app 'ready'\n      if (this._options.screen) {\n        this._patchEventEmitter(screen, 'screen', this._options.screen);\n      }\n\n      if (this._options.powerMonitor) {\n        this._patchEventEmitter(powerMonitor, 'powerMonitor', this._options.powerMonitor);\n      }\n    });\n\n    if (this._options.app) {\n      this._patchEventEmitter(app, 'app', this._options.app);\n    }\n\n    if (this._options.autoUpdater) {\n      this._patchEventEmitter(autoUpdater, 'autoUpdater', this._options.autoUpdater);\n    }\n\n    if (this._options.browserWindow) {\n      onBrowserWindowCreated((window) => {\n        const id = window.webContents.id;\n        const windowName = initOptions?.getRendererName?.(window.webContents) || 'window';\n        this._patchEventEmitter(window, windowName, this._options.browserWindow, id);\n      });\n    }\n\n    if (this._options.webContents) {\n      onWebContentsCreated((contents) => {\n        const id = contents.id;\n        const webContentsName = initOptions?.getRendererName?.(contents) || 'renderer';\n        this._patchEventEmitter(contents, webContentsName, this._options.webContents, id);\n      });\n    }\n  }\n\n  /**\n   * Monkey patches the EventEmitter to capture breadcrumbs for the specified events. ðŸ™ˆ\n   */\n  private _patchEventEmitter(\n    emitter: NodeJS.EventEmitter | WebContents | BrowserWindow,\n    category: string,\n    shouldCapture: EventFunction | undefined | false,\n    id?: number | undefined,\n  ): void {\n    const emit = emitter.emit.bind(emitter) as (event: string, ...args: unknown[]) => boolean;\n\n    emitter.emit = (event: string, ...args: unknown[]) => {\n      if (shouldCapture && shouldCapture(event)) {\n        const breadcrumb: Breadcrumb = {\n          category: 'electron',\n          message: `${category}.${event}`,\n          timestamp: new Date().getTime() / 1_000,\n          type: 'ui',\n        };\n\n        if (id) {\n          breadcrumb.data = { ...getRendererProperties(id) };\n\n          if (!this._options.captureWindowTitles && breadcrumb.data?.title) {\n            delete breadcrumb.data?.title;\n          }\n        }\n\n        addBreadcrumb(breadcrumb);\n      }\n\n      return emit(event, ...args);\n    };\n  }\n}\n"]}