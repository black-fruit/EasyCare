{"version":3,"file":"screenshots.js","sourceRoot":"","sources":["../../../src/main/integrations/screenshots.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEzC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,iCAAiC;AACjC,MAAM,OAAO,WAAW;IAAxB;QAIE,kBAAkB;QACX,SAAI,GAAW,WAAW,CAAC,EAAE,CAAC;IAqCvC,CAAC;IAnCC,kBAAkB;IACX,SAAS,CAAC,uBAA2D;;QAC1E,MAAM,gBAAgB,GAAG,CAAC,CAAC,CAAC,MAAA,aAAa,EAAE,CAAC,SAAS,EAAE,0CAAE,UAAU,EAA0B,CAAA,CAAC,gBAAgB,CAAC;QAE/G,IAAI,gBAAgB,EAAE;YACpB,uBAAuB,CAAC,CAAO,KAAY,EAAE,IAAe,EAAE,EAAE;gBAC9D,kEAAkE;gBAClE,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;oBACrD,IAAI,KAAK,GAAG,CAAC,CAAC;oBAEd,KAAK,MAAM,MAAM,IAAI,aAAa,CAAC,aAAa,EAAE,EAAE;wBAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;4BACrB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;yBACvB;wBAED,IAAI;4BACF,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE;gCAC/C,MAAM,QAAQ,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,cAAc,KAAK,MAAM,CAAC;gCAC5E,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,CAAC;gCAExC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;gCAEnF,KAAK,IAAI,CAAC,CAAC;6BACZ;yBACF;wBAAC,OAAO,CAAC,EAAE;4BACV,8EAA8E;4BAC9E,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;yBAC/C;qBACF;iBACF;gBAED,OAAO,KAAK,CAAC;YACf,CAAC,CAAA,CAAC,CAAC;SACJ;IACH,CAAC;;AAxCD,kBAAkB;AACJ,cAAE,GAAW,aAAa,CAAC","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, EventProcessor, Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { BrowserWindow } from 'electron';\n\nimport { capturePage } from '../electron-normalize';\nimport { ElectronMainOptions } from '../sdk';\n\n/** Adds Screenshots to events */\nexport class Screenshots implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'Screenshots';\n\n  /** @inheritDoc */\n  public name: string = Screenshots.id;\n\n  /** @inheritDoc */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    const attachScreenshot = !!(getCurrentHub().getClient()?.getOptions() as ElectronMainOptions).attachScreenshot;\n\n    if (attachScreenshot) {\n      addGlobalEventProcessor(async (event: Event, hint: EventHint) => {\n        // We don't capture screenshots for transactions or native crashes\n        if (!event.transaction && event.platform !== 'native') {\n          let count = 1;\n\n          for (const window of BrowserWindow.getAllWindows()) {\n            if (!hint.attachments) {\n              hint.attachments = [];\n            }\n\n            try {\n              if (!window.isDestroyed() && window.isVisible()) {\n                const filename = count === 1 ? 'screenshot.png' : `screenshot-${count}.png`;\n                const image = await capturePage(window);\n\n                hint.attachments.push({ filename, data: image.toPNG(), contentType: 'image/png' });\n\n                count += 1;\n              }\n            } catch (e) {\n              // Catch all errors so we don't break event submission if something goes wrong\n              logger.error('Error capturing screenshot', e);\n            }\n          }\n        }\n\n        return event;\n      });\n    }\n  }\n}\n"]}