{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/main/context.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Contexts, Event, SdkInfo } from '@sentry/types';\nimport * as child from 'child_process';\nimport { app } from 'electron';\nimport { platform, release } from 'os';\nimport { join } from 'path';\n\nimport { isPackaged } from './electron-normalize';\nimport { readDirAsync, readFileAsync } from './fs';\nimport { SDK_VERSION } from './version';\n\nexport const SDK_NAME = 'sentry.javascript.electron';\n\n/** App context information. */\ninterface AppContext {\n  /** The name of the app. */\n  app_name: string;\n  /** The app version. */\n  app_version: string;\n  /** app start time */\n  app_start_time: string;\n  /** app build type */\n  build_type?: string;\n}\n\n/** Operating system context information. */\ninterface OsContext {\n  /** The name of the operating system. */\n  name?: string;\n  /** The operating system version. */\n  version?: string;\n  /** Operating system specific build identifier */\n  build?: string;\n  /** Version-independent kernel version. */\n  kernel_version?: string;\n}\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: string[];\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: (content) => content,\n  arch: (content) => matchFirst(/distrib_release=(.*)/, content),\n  centos: (content) => matchFirst(/release ([^ ]+)/, content),\n  debian: (content) => content,\n  fedora: (content) => matchFirst(/release (..)/, content),\n  mint: (content) => matchFirst(/distrib_release=(.*)/, content),\n  red: (content) => matchFirst(/release ([^ ]+)/, content),\n  suse: (content) => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: (content) => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Mac OS X',\n    version: `10.${Number(release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      child.execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find((file) => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find((d) => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: release(),\n      };\n  }\n}\n\n/** Gets SDK info */\nexport function getSdkInfo(): SdkInfo {\n  return {\n    name: SDK_NAME,\n    packages: [\n      {\n        name: 'npm:@sentry/electron',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  };\n}\n\n/** Gets the app context */\nfunction getAppContext(): AppContext {\n  const appCtx: AppContext = {\n    app_name: app.name || app.getName(),\n    app_version: app.getVersion(),\n    app_start_time: new Date(Date.now() - process.uptime() * 1_000).toISOString(),\n  };\n\n  if (process.mas) {\n    appCtx.build_type = 'app-store';\n  }\n\n  if (process.windowsStore) {\n    appCtx.build_type = 'windows-store';\n  }\n\n  return appCtx;\n}\n\n/** Gets the app contexts */\nasync function getContexts(): Promise<Contexts> {\n  const contexts: Contexts = {\n    app: getAppContext() as Record<string, any>,\n    os: (await getOsContext()) as Record<string, any>,\n    browser: {\n      name: 'Chrome',\n    },\n    chrome: {\n      name: 'Chrome',\n      type: 'runtime',\n      version: process.versions.chrome,\n    },\n    device: {\n      arch: process.arch,\n      family: 'Desktop',\n    },\n    node: {\n      name: 'Node',\n      type: 'runtime',\n      version: process.versions.node,\n    },\n    runtime: {\n      name: 'Electron',\n      version: process.versions.electron,\n    },\n  };\n\n  return contexts;\n}\n\n/** Gets the default release name */\nexport function getDefaultReleaseName(): string {\n  const app_name = app.name || app.getName();\n  return `${app_name.replace(/\\W/g, '-')}@${app.getVersion()}`;\n}\n\n/** Gets the default environment */\nexport function getDefaultEnvironment(): string {\n  return isPackaged ? 'production' : 'development';\n}\n\n/**\n * Computes Electron-specific default fields for events.\n *\n * The event defaults include contexts for the Electron, Node and Chrome\n * runtimes, limited device information, operating system context and defaults\n * for the release and environment.\n */\nasync function _getEventDefaults(release?: string, environment?: string): Promise<Event> {\n  return {\n    sdk: getSdkInfo(),\n    contexts: await getContexts(),\n    environment: environment || getDefaultEnvironment(),\n    release: release || getDefaultReleaseName(),\n    user: { ip_address: '{{auto}}' },\n    tags: {\n      'event.origin': 'electron',\n      'event.environment': 'javascript',\n      'event.process': 'browser',\n      // Legacy way of filtering native vs JavaScript events\n      event_type: 'javascript',\n    },\n  };\n}\n\n/** Cached event prototype with default values. */\nlet cachedDefaultsPromise: Promise<Event>;\n\n/**\n * Computes and caches Electron-specific default fields for events.\n *\n * The event defaults include contexts for the Electron, Node and Chrome\n * runtimes, limited device information, operating system context and defaults\n * for the release and environment.\n */\nexport async function getEventDefaults(release?: string, environment?: string): Promise<Event> {\n  // The event defaults are cached as long as the app is running. We create the\n  // promise here synchronously to avoid multiple events computing them at the\n  // same time.\n  if (!cachedDefaultsPromise) {\n    cachedDefaultsPromise = _getEventDefaults(release, environment);\n  }\n\n  return cachedDefaultsPromise;\n}\n"]}