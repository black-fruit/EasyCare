{"version":3,"file":"electron-offline-net.js","sourceRoot":"","sources":["../../../src/main/transports/electron-offline-net.ts"],"names":[],"mappings":"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","sourcesContent":["import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { net } from 'electron';\nimport { join } from 'path';\n\nimport { sentryCachePath } from '../fs';\nimport { createElectronNetRequestExecutor, ElectronNetTransportOptions } from './electron-net';\nimport { PersistedRequestQueue } from './queue';\n\ntype BeforeSendResponse = 'send' | 'queue' | 'drop';\n\nexport interface ElectronOfflineTransportOptions extends ElectronNetTransportOptions {\n  /**\n   * The maximum number of days to keep an event in the queue.\n   */\n  maxQueueAgeDays?: number;\n\n  /**\n   * The maximum number of events to keep in the queue.\n   */\n  maxQueueCount?: number;\n\n  /**\n   * Called every time the number of requests in the queue changes.\n   */\n  queuedLengthChanged?: (length: number) => void;\n\n  /**\n   * Called before attempting to send an event to Sentry.\n   *\n   * Return 'send' to attempt to send the event.\n   * Return 'queue' to queue and persist the event for sending later.\n   * Return 'drop' to drop the event.\n   */\n  beforeSend?: (request: TransportRequest) => BeforeSendResponse | Promise<BeforeSendResponse>;\n}\n\nconst START_DELAY = 5_000;\nconst MAX_DELAY = 2_000_000_000;\n\n/** Returns true is there's a chance we're online */\nfunction maybeOnline(): boolean {\n  return !('online' in net) || net.online === true;\n}\n\nfunction defaultBeforeSend(_: TransportRequest): BeforeSendResponse {\n  return maybeOnline() ? 'send' : 'queue';\n}\n\nfunction isRateLimited(result: TransportMakeRequestResponse): boolean {\n  return !!(result.headers && 'x-sentry-rate-limits' in result.headers);\n}\n\n/**\n * Creates a Transport that uses Electrons net module to send events to Sentry. When they fail to send they are\n * persisted to disk and sent later\n */\nexport function makeElectronOfflineTransport(options: ElectronOfflineTransportOptions): Transport {\n  const netMakeRequest = createElectronNetRequestExecutor(options.url, options.headers || {});\n  const queue: PersistedRequestQueue = new PersistedRequestQueue(\n    join(sentryCachePath, 'queue'),\n    options.maxQueueAgeDays,\n    options.maxQueueCount,\n  );\n\n  const beforeSend = options.beforeSend || defaultBeforeSend;\n\n  let retryDelay: number = START_DELAY;\n  let lastQueueLength = -1;\n\n  function queueLengthChanged(queuedEvents: number): void {\n    if (options.queuedLengthChanged && queuedEvents !== lastQueueLength) {\n      lastQueueLength = queuedEvents;\n      options.queuedLengthChanged(queuedEvents);\n    }\n  }\n\n  function flushQueue(): void {\n    queue\n      .pop()\n      .then((found) => {\n        if (found) {\n          // We have pendingCount plus found.request\n          queueLengthChanged(found.pendingCount + 1);\n          logger.log('Found a request in the queue');\n          makeRequest(found.request).catch((e) => logger.error(e));\n        } else {\n          queueLengthChanged(0);\n        }\n      })\n      .catch((e) => logger.error(e));\n  }\n\n  async function queueRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    logger.log('Queuing request');\n    queueLengthChanged(await queue.add(request));\n\n    setTimeout(() => {\n      flushQueue();\n    }, retryDelay);\n\n    retryDelay *= 3;\n\n    // If the delay is bigger than 2^31 (max signed 32-bit int), setTimeout throws\n    // an error and falls back to 1 which can cause a huge number of requests.\n    if (retryDelay > MAX_DELAY) {\n      retryDelay = MAX_DELAY;\n    }\n\n    return {};\n  }\n\n  async function makeRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    let action = beforeSend(request);\n\n    if (action instanceof Promise) {\n      action = await action;\n    }\n\n    if (action === 'send') {\n      try {\n        const result = await netMakeRequest(request);\n\n        if (!isRateLimited(result)) {\n          logger.log('Successfully sent');\n          // Reset the retry delay\n          retryDelay = START_DELAY;\n          // We were successful so check the queue\n          flushQueue();\n          return result;\n        } else {\n          logger.log('Rate limited', result.headers);\n        }\n      } catch (error) {\n        logger.log('Error sending:', error);\n      }\n\n      action = 'queue';\n    }\n\n    if (action == 'queue') {\n      return queueRequest(request);\n    }\n\n    logger.log('Dropping request');\n    return {};\n  }\n\n  flushQueue();\n\n  return createTransport(options, makeRequest);\n}\n"]}