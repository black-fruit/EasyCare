{"version":3,"file":"ipc.js","sourceRoot":"","sources":["../src/renderer/ipc.ts"],"names":[],"mappings":";;AAAA,0CAA0C;AAC1C,+BAA+B;AAC/B,yCAAuC;AAEvC,sCAAsE;AAEtE,4CAA4C;AAC5C,SAAS,iBAAiB;IACxB,sDAAsD;IACtD,IAAI,MAAM,CAAC,cAAc,EAAE;QACzB,OAAO,MAAM,CAAC,cAAc,CAAC;KAC9B;IAED,cAAM,CAAC,GAAG,CAAC,qFAAqF,CAAC,CAAC;IAElG,KAAK,CAAC,GAAG,wBAAe,MAAM,mBAAU,CAAC,IAAI,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CACnG,OAAO,CAAC,KAAK,CAAC;;;0HAGwG,CAAC,CACxH,CAAC;IAEF,6EAA6E;IAC7E,qJAAqJ;IACrJ,OAAO;QACL,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;YAClB,KAAK,CAAC,GAAG,wBAAe,MAAM,mBAAU,CAAC,KAAK,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;gBAChG,SAAS;YACX,CAAC,CAAC,CAAC;QACL,CAAC;QACD,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;YAClB,KAAK,CAAC,GAAG,wBAAe,MAAM,mBAAU,CAAC,KAAK,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;gBAChG,SAAS;YACX,CAAC,CAAC,CAAC;QACL,CAAC;QACD,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE;YACrB,KAAK,CAAC,GAAG,wBAAe,MAAM,mBAAU,CAAC,QAAQ,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;gBACnG,SAAS;YACX,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC;AAED,IAAI,eAAyC,CAAC;AAE9C;;;;;GAKG;AACH,SAAgB,MAAM;IACpB,IAAI,CAAC,eAAe,EAAE;QACpB,eAAe,GAAG,iBAAiB,EAAE,CAAC;KACvC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAND,wBAMC","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* eslint-disable no-console */\nimport { logger } from '@sentry/utils';\n\nimport { IPCChannel, IPCInterface, PROTOCOL_SCHEME } from '../common';\n\n/** Gets the available IPC implementation */\nfunction getImplementation(): IPCInterface {\n  // Favour IPC if it's been exposed by a preload script\n  if (window.__SENTRY_IPC__) {\n    return window.__SENTRY_IPC__;\n  }\n\n  logger.log('IPC was not configured in preload script, falling back to custom protocol and fetch');\n\n  fetch(`${PROTOCOL_SCHEME}://${IPCChannel.PING}/sentry_key`, { method: 'POST', body: '' }).catch(() =>\n    console.error(`Sentry SDK failed to establish connection with the Electron main process.\n - Ensure you have initialized the SDK in the main process\n - If your renderers use custom sessions, be sure to set 'getSessions' in the main process options\n - If you are bundling your main process code and using Electron < v5, you'll need to manually configure a preload script`),\n  );\n\n  // We include sentry_key in the URL so these dont end up in fetch breadcrumbs\n  // https://github.com/getsentry/sentry-javascript/blob/a3f70d8869121183bec037571a3ee78efaf26b0b/packages/browser/src/integrations/breadcrumbs.ts#L240\n  return {\n    sendScope: (body) => {\n      fetch(`${PROTOCOL_SCHEME}://${IPCChannel.SCOPE}/sentry_key`, { method: 'POST', body }).catch(() => {\n        // ignore\n      });\n    },\n    sendEvent: (body) => {\n      fetch(`${PROTOCOL_SCHEME}://${IPCChannel.EVENT}/sentry_key`, { method: 'POST', body }).catch(() => {\n        // ignore\n      });\n    },\n    sendEnvelope: (body) => {\n      fetch(`${PROTOCOL_SCHEME}://${IPCChannel.ENVELOPE}/sentry_key`, { method: 'POST', body }).catch(() => {\n        // ignore\n      });\n    },\n  };\n}\n\nlet cachedInterface: IPCInterface | undefined;\n\n/**\n * Renderer IPC interface\n *\n * Favours IPC if its been exposed via a preload script but will\n * fallback to custom protocol and fetch if IPC is not available\n */\nexport function getIPC(): IPCInterface {\n  if (!cachedInterface) {\n    cachedInterface = getImplementation();\n  }\n\n  return cachedInterface;\n}\n"]}