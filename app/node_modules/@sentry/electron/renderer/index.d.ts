import * as ElectronRendererIntegrations from './integrations';
export type { Breadcrumb, BreadcrumbHint, Request, SdkInfo, Event, EventHint, Exception, Session, Severity, SeverityLevel, StackFrame, Stacktrace, Thread, User, } from '@sentry/types';
export { addGlobalEventProcessor, addBreadcrumb, captureException, captureEvent, captureMessage, configureScope, createTransport, getHubFromCarrier, getCurrentHub, Hub, makeMain, Scope, startTransaction, setContext, setExtra, setExtras, setTag, setTags, setUser, withScope, FunctionToString, InboundFilters, } from '@sentry/core';
export { BrowserClient, BrowserTracing, lastEventId, showReportDialog, Replay } from '@sentry/browser';
export type { BrowserOptions, ReportDialogOptions } from '@sentry/browser';
export declare const Integrations: {
    GlobalHandlers: typeof import("@sentry/browser").GlobalHandlers;
    TryCatch: typeof import("@sentry/browser").TryCatch;
    Breadcrumbs: typeof import("@sentry/browser").Breadcrumbs;
    LinkedErrors: typeof import("@sentry/browser").LinkedErrors;
    HttpContext: typeof import("@sentry/browser").HttpContext;
    Dedupe: typeof import("@sentry/browser").Dedupe;
    FunctionToString: typeof import("@sentry/browser").FunctionToString;
    InboundFilters: typeof import("@sentry/browser").InboundFilters;
    ScopeToMain: typeof ElectronRendererIntegrations.ScopeToMain;
    EventToMain: typeof ElectronRendererIntegrations.EventToMain;
};
export { init, defaultIntegrations } from './sdk';
//# sourceMappingURL=index.d.ts.map