{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/renderer/transport.ts"],"names":[],"mappings":";;;AAAA,uCAA+C;AAG/C,+BAA+B;AAE/B;;GAEG;AACH,SAAgB,qBAAqB,CAAC,OAA6B;IACjE,MAAM,GAAG,GAAG,IAAA,YAAM,GAAE,CAAC;IAErB,OAAO,IAAA,sBAAe,EAAC,OAAO,EAAE,CAAO,OAAyB,EAAyC,EAAE;QACzG,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,mHAAmH;QACnH,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;IAC7B,CAAC,CAAA,CAAC,CAAC;AACL,CAAC;AARD,sDAQC","sourcesContent":["import { createTransport } from '@sentry/core';\nimport { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\n\nimport { getIPC } from './ipc';\n\n/**\n * Creates a Transport that passes envelopes to the Electron main process.\n */\nexport function makeRendererTransport(options: BaseTransportOptions): Transport {\n  const ipc = getIPC();\n\n  return createTransport(options, async (request: TransportRequest): Promise<TransportMakeRequestResponse> => {\n    ipc.sendEnvelope(request.body);\n    // Since the main process handles sending of envelopes and rate limiting, we always return 200 OK to the renderers.\n    return { statusCode: 200 };\n  });\n}\n"]}