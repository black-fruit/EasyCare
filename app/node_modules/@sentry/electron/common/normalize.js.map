{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../src/common/normalize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Envelope, Event, ReplayEvent } from '@sentry/types';\nimport { addItemToEnvelope, createEnvelope, forEachEnvelopeItem } from '@sentry/utils';\n\n/**\n * Normalizes URLs in exceptions and stacktraces so Sentry can fingerprint\n * across platforms.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrl(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return newUrl\n    .replace(/\\\\/g, '/')\n    .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n    .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');\n}\n\n/**\n * Normalizes all URLs in an event. See {@link normalizeUrl} for more\n * information. Mutates the passed in event.\n *\n * @param event The event to normalize.\n */\nexport function normalizeEvent(event: Event, basePath: string): Event {\n  // Retrieve stack traces and normalize their paths. Without this, grouping\n  // would not work due to usernames in file paths.\n  for (const exception of event.exception?.values || []) {\n    for (const frame of exception.stacktrace?.frames || []) {\n      if (frame.filename) {\n        frame.filename = normalizeUrl(frame.filename, basePath);\n      }\n    }\n  }\n\n  // We need to normalize debug ID images the same way as the stack frames for symbolicator to match them correctly\n  for (const debugImage of event.debug_meta?.images || []) {\n    if (debugImage.type === 'sourcemap') {\n      debugImage.code_file = normalizeUrl(debugImage.code_file, basePath);\n    }\n  }\n\n  if (event.transaction) {\n    event.transaction = normalizeUrl(event.transaction, basePath);\n  }\n\n  const { request = {} } = event;\n  if (request.url) {\n    request.url = normalizeUrl(request.url, basePath);\n  }\n\n  event.contexts = {\n    ...event.contexts,\n    runtime: {\n      name: 'Electron',\n      version: process.versions.electron,\n    },\n  };\n\n  // The user agent is parsed by Sentry and would overwrite certain context\n  // information, which we don't want. Generally remove it, since we know that\n  // we are browsing with Chrome.\n  if (request.headers) {\n    delete request.headers['User-Agent'];\n  }\n\n  // The Node SDK includes server_name, which contains the machine name of the computer running Electron.\n  // In this case this is likely to include PII.\n  const { tags = {} } = event;\n  delete tags.server_name;\n  delete event.server_name;\n  return event;\n}\n\n/** Normalizes URLs in any replay_event items found in an envelope */\nexport function normalizeUrlsInReplayEnvelope(envelope: Envelope, basePath: string): Envelope {\n  let modifiedEnvelope = createEnvelope(envelope[0]);\n\n  let isReplay = false;\n\n  forEachEnvelopeItem(envelope, (item, type) => {\n    if (type === 'replay_event') {\n      isReplay = true;\n      const [headers, event] = item as [{ type: 'replay_event' }, ReplayEvent];\n\n      if (Array.isArray(event.urls)) {\n        event.urls = event.urls.map((url) => normalizeUrl(url, basePath));\n      }\n\n      if (event?.request?.url) {\n        event.request.url = normalizeUrl(event.request.url, basePath);\n      }\n\n      modifiedEnvelope = addItemToEnvelope(modifiedEnvelope, [headers, event]);\n    } else if (type === 'replay_recording') {\n      modifiedEnvelope = addItemToEnvelope(modifiedEnvelope, item);\n    }\n  });\n\n  return isReplay ? modifiedEnvelope : envelope;\n}\n"]}