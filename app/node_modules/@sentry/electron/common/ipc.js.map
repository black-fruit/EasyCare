{"version":3,"file":"ipc.js","sourceRoot":"","sources":["../src/common/ipc.ts"],"names":[],"mappings":";;AAAa,QAAA,eAAe,GAAG,YAAY,CAAC;AAE5C,IAAY,UASX;AATD,WAAY,UAAU;IACpB,6CAA6C;IAC7C,2CAA6B,CAAA;IAC7B,8CAA8C;IAC9C,6CAA+B,CAAA;IAC/B,iDAAiD;IACjD,6CAA+B,CAAA;IAC/B,iDAAiD;IACjD,mDAAqC,CAAA;AACvC,CAAC,EATW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QASrB","sourcesContent":["export const PROTOCOL_SCHEME = 'sentry-ipc';\n\nexport enum IPCChannel {\n  /** IPC to check main process is listening */\n  PING = 'sentry-electron.ping',\n  /** IPC to send a captured event to Sentry. */\n  EVENT = 'sentry-electron.event',\n  /** IPC to pass scope changes to main process. */\n  SCOPE = 'sentry-electron.scope',\n  /** IPC to pass envelopes to the main process. */\n  ENVELOPE = 'sentry-electron.envelope',\n}\n\nexport interface IPCInterface {\n  sendScope: (scope: string) => void;\n  sendEvent: (event: string) => void;\n  sendEnvelope: (evn: Uint8Array | string) => void;\n}\n\n/**\n * We store the IPC interface on window so it's the same for both regular and isolated contexts\n */\ndeclare global {\n  interface Window {\n    __SENTRY_IPC__?: IPCInterface;\n    __SENTRY__RENDERER_INIT__?: boolean;\n  }\n}\n"]}