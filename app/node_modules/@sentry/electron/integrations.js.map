{"version":3,"file":"integrations.js","sourceRoot":"","sources":["src/integrations.ts"],"names":[],"mappings":";;AACA,yCAA+C;AAmC/C,2GAA2G;AAC3G,SAAgB,eAAe;IAC7B,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS;QAC/B,CAAC,iCAEM,IAAA,sBAAc,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,YAAY,KAChD,WAAW,EAAE,gBAAgB,EAC7B,WAAW,EAAE,gBAAgB,IAEjC,CAAC,iCAEM,IAAA,sBAAc,EAAC,MAAM,EAAE,YAAY,CAAC,CAAC,YAAY,KACpD,cAAc,EAAE,gBAAgB,EAChC,gBAAgB,EAAE,gBAAgB,EAClC,mBAAmB,EAAE,gBAAgB,EACrC,WAAW,EAAE,gBAAgB,EAC7B,gBAAgB,EAAE,gBAAgB,EAClC,gBAAgB,EAAE,gBAAgB,EAClC,kBAAkB,EAAE,gBAAgB,EACpC,iBAAiB,EAAE,gBAAgB,EACnC,YAAY,EAAE,gBAAgB,EAC9B,WAAW,EAAE,gBAAgB,GAC9B,CAAC;AACR,CAAC;AAtBD,0CAsBC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,gBAAgB;IAAtB;QAIE,kBAAkB;QACX,SAAI,GAAW,gBAAgB,CAAC,EAAE,CAAC;IAM5C,CAAC;IAJC,kBAAkB;IACX,SAAS;QACd,EAAE;IACJ,CAAC;;AATD,kBAAkB;AACJ,mBAAE,GAAW,kBAAkB,CAAC;AAWhD,uDAAuD;AACvD,SAAgB,uBAAuB,CAAC,OAAiC;IACvE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QACvC,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC;KAC3F;SAAM,IAAI,OAAO,OAAO,CAAC,YAAY,KAAK,UAAU,EAAE;QACrD,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC;QAExC,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,EAAE,EAAE;YACtC,MAAM,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;YAClD,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAC5F,CAAC,CAAC;KACH;AACH,CAAC;AAXD,0DAWC","sourcesContent":["import { Integration } from '@sentry/types';\nimport { dynamicRequire } from '@sentry/utils';\n\nimport { ElectronOptions } from './';\nimport {\n  AdditionalContext,\n  ChildProcess,\n  ElectronBreadcrumbs,\n  ElectronMinidump,\n  MainContext,\n  MainProcessSession,\n  OnUncaughtException,\n  PreloadInjection,\n  Screenshots,\n  SentryMinidump,\n} from './main/integrations';\nimport { EventToMain, ScopeToMain } from './renderer/integrations';\n\n/** Convenience interface used to expose Integrations */\nexport interface Integrations {\n  // For main process\n  SentryMinidump: SentryMinidump;\n  ElectronMinidump: ElectronMinidump;\n  ElectronBreadcrumbs: ElectronBreadcrumbs;\n  MainContext: MainContext;\n  OnUncaughtExcept: OnUncaughtException;\n  PreloadInjection: PreloadInjection;\n  MainProcessSession: MainProcessSession;\n  AdditionalContext: AdditionalContext;\n  ChildProcess: ChildProcess;\n  Screenshots: Screenshots;\n  // For renderer process\n  ScopeToMain: ScopeToMain;\n  EventToMain: EventToMain;\n}\n\n/** Return all Electron integrations and add EmptyIntegrations for integrations missing in this process. */\nexport function getIntegrations(): Integrations {\n  return process.type === 'browser'\n    ? {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        ...dynamicRequire(module, './main').Integrations,\n        ScopeToMain: EmptyIntegration,\n        EventToMain: EmptyIntegration,\n      }\n    : {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        ...dynamicRequire(module, './renderer').Integrations,\n        SentryMinidump: EmptyIntegration,\n        ElectronMinidump: EmptyIntegration,\n        ElectronBreadcrumbs: EmptyIntegration,\n        MainContext: EmptyIntegration,\n        OnUncaughtExcept: EmptyIntegration,\n        PreloadInjection: EmptyIntegration,\n        MainProcessSession: EmptyIntegration,\n        AdditionalContext: EmptyIntegration,\n        ChildProcess: EmptyIntegration,\n        Screenshots: EmptyIntegration,\n      };\n}\n\n/**\n * The EmptyIntegration gets loaded when the requested integration cannot be used in the current Electron process\n *\n * This allows you to call the same code from both Electron processes and not have to conditionally compile\n *\n * ```\n * const { init, Integrations } = require('@sentry/electron');\n *\n * init({\n *   dsn: process.env.DSN,\n *   integrations: [new Integrations.ElectronMinidump()],\n * });\n *\n */\nclass EmptyIntegration implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'EmptyIntegration';\n\n  /** @inheritDoc */\n  public name: string = EmptyIntegration.id;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    //\n  }\n}\n\n/** Filters out any EmptyIntegrations that are found */\nexport function removeEmptyIntegrations(options: Partial<ElectronOptions>): void {\n  if (Array.isArray(options.integrations)) {\n    options.integrations = options.integrations.filter((i) => i.name !== EmptyIntegration.id);\n  } else if (typeof options.integrations === 'function') {\n    const originalFn = options.integrations;\n\n    options.integrations = (integrations) => {\n      const userIntegrations = originalFn(integrations);\n      return userIntegrations.filter((integration) => integration.name !== EmptyIntegration.id);\n    };\n  }\n}\n"]}